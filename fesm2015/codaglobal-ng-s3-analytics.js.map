{"version":3,"file":"codaglobal-ng-s3-analytics.js.map","sources":["ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.service.ts","ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.component.ts","ng://@codaglobal/ng-s3-analytics/lib/environment/environment.ts","ng://@codaglobal/ng-s3-analytics/lib/types/event.types.ts","ng://@codaglobal/ng-s3-analytics/lib/services/analytics/analytics.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/data-storage/data-storage.service.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/button/button.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/scroll/scroll.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/button-hover/button-hover.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/services/environment/environment.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/router/router.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/pointer/pointer.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/error-handler/errorHandler.service.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/key-stroke/key-stroke.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgS3AnalyticsService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ng-s3-analytics',\n  template: `\n    <p>\n      ng-s3-analytics works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgS3AnalyticsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export let environment = {\n    dataCollectionApi: 'https://1xgf5a2bq2.execute-api.ap-south-1.amazonaws.com/dev/',\n    isPageLoadingToBeDetected: true,\n    restrictIPRange: ''\n};\n\n\n","export enum EventLabels {\n    PAGE_LOAD = 'PAGE_LOAD',\n    MOUSE_HOVER = 'MOUSE_HOVER',\n    BUTTON_CLICK = 'BUTTON_CLICK',\n    MOUSE_MOVE = 'MOUSE_MOVE',\n    SCROLL = 'SCROLL',\n    CONSOLE_ERROR = 'CONSOLE_ERROR',\n    KEY_STROKE = 'KEY_STROKE'\n}\n\nexport enum Constants {\n    DEMOGRAPHIC_INFO = 'demographic-info',\n    SESSION_ID = 'ngS3AnalyticsSessionId',\n    DEMOGRAPHIC_API_URL = 'https://ipapi.co/json/'\n}\n\n\nexport class KeyStrokeEventType {\n    key: string; // pressed Key\n    keyCode: string; // pressed Key Code\n    elementId: string; // Id of element\n    isForm: boolean; // is it a form\n    form: Array<any>; // child elements of the form\n    tagName: string; // tagName of element\n    htmlElementType: string; // type of element\n    value: string; // previous value of the element\n    code: string; // Pressed key label\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from '../../environment/environment';\nimport * as uuid from 'uuid';\nimport { AnalyticsBean, PerformanceBean } from '../../analytics-bean/analytics-bean';\nimport { CookieService } from 'ngx-cookie-service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventLabels, KeyStrokeEventType, Constants } from '../../types/event.types';\n/**\n * Analytics Service\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalyticsService {\n\n  /** SessionId of plugin */\n  sessionId: string;\n  /** Demographic info */\n  demographicInfo: any = {};\n  /** Event label constants */\n  eventLabels = EventLabels;\n  /** Constants */\n  constants = Constants;\n\n  /**\n   * Analytics Service constructor\n   * @param cookieService\n   * @param httpService\n   */\n  constructor(\n    private cookieService: CookieService,\n    private httpService: HttpClient) {\n    if (!this.cookieService.check(this.constants.DEMOGRAPHIC_INFO)) {\n      this.getIp();\n    } else {\n      this.demographicInfo = JSON.parse(this.cookieService.get(this.constants.DEMOGRAPHIC_INFO));\n    }\n    this.setSessionId();\n  }\n\n  /**\n   * Checking whether sessionId present in cookie or not\n   * if no session id cookie present, adding new session id otherwise reusing the session id value\n   */\n  private setSessionId(): void {\n    if (sessionStorage.getItem(this.constants.SESSION_ID)) {\n      this.sessionId = sessionStorage.getItem(this.constants.SESSION_ID);\n    } else {\n      this.sessionId = uuid.v4();\n      sessionStorage.setItem(this.constants.SESSION_ID, this.sessionId);\n    }\n  }\n\n  /**\n   * Checking the IP range to be restrict\n   * @param data - data to be pushed\n   */\n  public pushData(data: any): void {\n    if (this.checkIpRange()) {\n      this.publishTOAuthS3(data);\n    }\n  }\n\n\n  /**\n   * IP range restriction added\n   * @restrictIPRange is a regex\n   * if @restrictIPRange is match with current IP,\n   * the analytics data will be restricted\n   */\n  private checkIpRange(): boolean {\n    const ipRange = environment.restrictIPRange;\n    if (ipRange && this.demographicInfo.ip) {\n      return this.demographicInfo.ip.match(ipRange) ? false : true;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Converting JSON Array to string\n   * @param data\n   */\n  private processForAthena(data: Array<AnalyticsBean>): string {\n    return data.map((object: any) => {\n      object['sessionId'] = this.sessionId;\n      return JSON.stringify(object);\n    }).join('\\n');\n  }\n\n  /**\n    * Preparing data to be pushed to DataStorage\n    * @param data  data to be pushed\n    */\n  private publishTOAuthS3(data: any): void {\n    const filename = `${new Date().toISOString().split('T')[0]}_${this.sessionId}_${new Date().toISOString()}.json`;\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.pushDataToS3(filename, this.processForAthena(data.eventValues), headers);\n  }\n\n\n  /**\n   * Pushing data to corresponding bucket using data collection api\n   * @param path - service path\n   * @param data - data to be pushed\n   */\n  private pushDataToS3(path: string, data: any, headers: HttpHeaders): void {\n    const url = `${environment.dataCollectionApi}${path}`;\n\n    this.httpService.put(url, data, { headers: headers }).subscribe(res => { }, err => {\n      console.log(err);\n    });\n  }\n\n  /**\n   * Save the captured HTML to the data collection\n   * @param htmlTemplate - DOM Content\n   * @param screenshotName - filename to be saved\n   */\n  public saveScreenshotsInS3(htmlTemplate: string, screenshotName: string): void {\n    const filename = `assets/${new Date().toISOString().split('T')[0]}/${this.sessionId}/${screenshotName}.html`;\n    const headers = new HttpHeaders({ 'Content-Type': 'text/html' });\n    this.pushDataToS3(filename, htmlTemplate, headers);\n  }\n\n  /**\n   * Pushing console errors to S3 bucket\n   * @param data \n   */\n  public publishConsoleErrors(data: any): void {\n\n    data['sessionId'] = this.sessionId;\n    const filename = `${new Date().toISOString().split('T')[0]}_${this.sessionId}_console_errors_${new Date().getTime()}.json`;\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.pushDataToS3(filename, data, headers);\n  }\n\n\n\n  /**\n   * Setting analytics object to be saved in S3 bucket\n   * @param userData - Data transferred to Event Directive\n   * @param eventDetails - Position of events\n   * @param eventName  - Type of event\n   * @param screenshotName  - file name of saved screenshot if the event is PageLoaded\n   */\n  public setAnalyticsData(\n    userData: any = {},\n    eventDetails: any,\n    eventName: string,\n    screenshotName: string,\n    optional?: {\n      eventComponent?: string,\n      keyStrokeData?: KeyStrokeEventType\n    }): AnalyticsBean {\n    const analyticsBean: AnalyticsBean = {\n      eventLabel: eventName,\n      eventComponent: optional && optional.eventComponent ? optional.eventComponent : window.location.pathname.split('?')[0],\n      browser: window.navigator.userAgent,\n      fullURL: window.location.href,\n      origin: window.location.origin,\n      resolution: `${window.innerWidth}x${window.innerHeight}`,\n      xCoord: this.getEventDetails(eventDetails['clientX']),\n      yCoord: this.getEventDetails(eventDetails['clientY']),\n      pageXCoord: window.pageXOffset.toString() || '0',\n      pageYCoord: window.pageYOffset.toString() || '0',\n      eventTime: new Date().toISOString(),\n      screenshot: screenshotName,\n      additionalInfo: JSON.stringify(userData),\n      utm: this.getUTMParameters(window.location.href),\n      demographicInfo: this.demographicInfo,\n      keyStrokeData: optional && optional.keyStrokeData,\n      htmlElement: this.getHtmlElement(eventDetails['target']),\n      performance: this.getPerformanceDetails(),\n    };\n    return analyticsBean;\n  }\n\n  /**\n   * Event details\n   * @param value \n   */\n  private getEventDetails(value: any): string {\n    return value !== undefined ? value.toString() : '0';\n  }\n\n  /**\n   * Get HTML Content\n   * @param targetElement - target element\n   */\n  private getHtmlElement(targetElement: any): string {\n    return targetElement !== undefined ? targetElement['innerHTML'] : '';\n  }\n\n\n  /**\n   * Performance details\n   */\n  private getPerformanceDetails(): PerformanceBean {\n    const performance = window.performance;\n    return {\n      navigation: performance.navigation,\n      timeOrigin: performance.timeOrigin,\n      timing: performance.timing\n    };\n  }\n\n  /**\n   * Memory usage of the application is provided by Google Chrome\n   * @param userAgent - User agent to check the browser\n   */\n  private geMemoryUsageInfo(userAgent: any) {\n    const isChrome = userAgent.split('chrome').length > 1;\n    const memory = isChrome ? window.performance['memory'] : '';\n    return memory;\n  }\n\n  /**\n   * Getting UTM Parameters by processing current pageURL\n   * @param url - Page URL\n   */\n  private getUTMParameters(url: string): any {\n    const utmObject = {};\n    if (url.includes('utm')) {\n      const utmParams = url.split('?')[1].split('&');\n      utmParams.map(param => {\n        const params = param.split('=');\n        utmObject[params[0]] = params[1];\n      });\n    }\n    return utmObject;\n  }\n\n  /**\n   * Set user demographic information in cookies\n   */\n  private getIp(): void {\n    this.httpService.get(this.constants.DEMOGRAPHIC_API_URL).subscribe(\n      (res: any) => {\n        this.demographicInfo = res;\n        this.cookieService.set(\n          this.constants.DEMOGRAPHIC_INFO, JSON.stringify(res),\n          new Date(new Date().getTime() + (1000 * 60 * 60 * 24)));\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { HttpClient } from '@angular/common/http';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataStorageService {\n\n  allDataAnalyticsArray: Array<any> = [];\n  allDataAnalytics: {\n    pageUrl: string,\n    eventValues: Array<any>\n  };\n  previousUrl: string;\n  keys: Array<any> = [];\n  eventCollector = new Map();\n  constructor(private analyticalService: AnalyticsService, private http: HttpClient) { }\n  private routeDetails: any = [];\n  count = 0;\n  setUrlKey(data: string) {\n    let flag = 0;\n    if (this.previousUrl === undefined) {\n      this.eventCollector.set(data, []);\n      this.previousUrl = data || '/';\n    } else if (!(data === this.previousUrl)) {\n      for (const key of Array.from(this.eventCollector.keys())) {\n        if (key === data) {\n          flag = 1;\n          break;\n        }\n      }\n      if (flag === 0) {\n        this.eventCollector.set(data, []);\n      }\n      this.previousUrl = data;\n    }\n  }\n  appendToAnalyticsArray(data: AnalyticsBean) {\n    if (this.previousUrl === undefined) {\n      this.setUrlKey(data.eventComponent);\n    }\n    this.eventCollector.get(this.previousUrl).push(data);\n  }\n\n  pushDataArrayToS3() {\n    this.count++;\n    // this.allDataAnalyticsMap = JSON.parse(JSON.stringify(Array.from(this.eventCollector.keys())));\n    for (const key of Array.from(this.eventCollector.keys())) {\n      this.allDataAnalytics = {\n        pageUrl: key,\n        eventValues: Array.from(this.eventCollector.get(key).values())\n      };\n      this.keys.push(key);\n      if (this.allDataAnalytics.eventValues.length > 0) {\n        this.analyticalService.pushData(this.allDataAnalytics);\n      }\n    }\n    this.eventCollector.clear();\n    for (const key of this.keys) {\n      this.eventCollector.set(key, []);\n    }\n  }\n\n  setRouteDetails(routeDetails: any) {\n    this.routeDetails = routeDetails;\n  }\n\n  getRouteDetails() {\n    return this.routeDetails;\n  }\n\n}\n","import { Directive, Input, HostListener } from '@angular/core';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { EventLabels } from '../../types/event.types';\n\n/**\n * Button Directive to track click event\n * Selector can be added to any HTML Element\n */\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[track-btn]'\n})\nexport class ButtonDirective {\n\n  // Gets important data about the button explicitly from the application\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-btn') data: any = {};\n  eventLabels = EventLabels;\n  eventDetails: any;\n\n  /**\n   * Button Tracking - Constructor\n   * @param dataStorage - DataStorageService\n   * @param analyticsService\n   */\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n\n  /**\n   *  Listen to button click actions\n   */\n  @HostListener('click', ['$event']) onClick($event: any) {\n    this.eventDetails = $event;\n    setTimeout(() => {\n      this.sendData();\n    }, 10);\n  }\n\n  /** Sending data on button click */\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.BUTTON_CLICK, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n","import { Directive, OnChanges, HostListener, Input } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[track-scroll]'\n})\nexport class ScrollDirective implements OnChanges {\n\n    // Gets important data about the component explicitly from the application\n    // tslint:disable-next-line: no-input-rename\n    @Input('track-scroll') data: any = {};\n    eventLabels = EventLabels;\n\n    constructor(\n        private analyticsService: AnalyticsService,\n        private dataStorage: DataStorageService\n    ) { }\n\n    // Capture the change in data\n    ngOnChanges(changes: any) {\n        this.data = changes.data.currentValue;\n    }\n\n    // Triggered when any scroll event occurs\n    @HostListener('window:scroll', ['$event']) onScrollEvent($event: any) {\n        setTimeout(() => {\n            this.sendData($event);\n        }, 100);\n    }\n\n\n    public sendData(event: any): void {\n        const analyticsBean: AnalyticsBean =\n            this.analyticsService.setAnalyticsData(this.data, event, this.eventLabels.SCROLL, '');\n        this.dataStorage.appendToAnalyticsArray(analyticsBean);\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[track-buttonHover]'\n})\nexport class ButtonHoverDirective {\n  /** */\n  eventDetails: any;\n  eventLabels = EventLabels;\n  // Gets important data about the button explicitly from the application\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-buttonHover') data: any = {};\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n  // Listen to button hover actions\n  @HostListener('mouseover', ['$event']) onMouseOver($event: any) {\n    this.eventDetails = $event;\n    setTimeout(() => {\n      this.sendData();\n    }, 10);\n  }\n\n  // Sending data on button hover\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.MOUSE_HOVER, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { environment } from '../../environment/environment';\nimport { Configuration } from '../../analytics-bean/analytics-bean';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class EnvironmentService {\n\n\n  // Setting Configuration on environment\n  setConfigurationToEnvironment(configuration: Configuration, isPageLoadingToBeDetected: boolean) {\n    environment.dataCollectionApi = configuration.dataCollectionApi;\n    environment.isPageLoadingToBeDetected = isPageLoadingToBeDetected;\n    environment.restrictIPRange = configuration.restrictIPRange;\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Router, NavigationEnd, NavigationError } from '@angular/router';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { EventLabels } from '../../types/event.types';\ndeclare let ngS3AnalyticsJS: any;\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouterService {\n  analyticsData: AnalyticsBean;\n  eventLabels = EventLabels;\n  navigateOn = '';\n  constructor(private routes: Router, private analyticsService: AnalyticsService, private dataStorage: DataStorageService,\n    // tslint:disable-next-line: deprecation\n    @Inject(DOCUMENT) private document: any) {\n\n  }\n\n  /**\n   * Tracking router events\n   */\n  public trackRouterEvents(): void {\n    /** Triggered when current page is loaded */\n    this.routes.events.subscribe((event) => {\n      /** Triggered when NavigationEnd event occurs */\n      if (event instanceof NavigationEnd) {\n        if (this.navigateOn !== event.url) {\n          this.analyticsPushData(event);\n          this.navigateOn = event.url;\n        }\n      } else if (event instanceof NavigationError) {\n        /** Triggered when NavigationError event occurs */\n        this.analyticsPushData(event);\n      }\n    });\n  }\n\n  /**\n   * Pushing analytics data\n   * @param event - Router Event\n   */\n  public analyticsPushData(event: any): void {\n    const screenshotName = new Date().getTime().toString();\n    this.analyticsData = this.analyticsService.setAnalyticsData({}, {}, this.eventLabels.PAGE_LOAD, `${screenshotName}.html`,\n      { eventComponent: event.url });\n    this.waitTillPageLoad(screenshotName);\n    // Data is send only when user configure the page loading to be true\n    this.dataStorage.setUrlKey(this.analyticsData.eventComponent);\n    setTimeout(() => {\n      this.dataStorage.appendToAnalyticsArray(this.analyticsData);\n    }, 0);\n  }\n\n\n  /**\n   * Waiting for page to load completely\n   * @param event \n   */\n  waitTillPageLoad(screenshotName: string) {\n    const _self = this;\n    const interval = setInterval(function () {\n      if (this.document.readyState === 'complete') {\n        clearInterval(interval);\n        _self.captureTemplate(screenshotName);\n      }\n    }, 1000);\n  }\n\n  /**\n   * Capture template of loaded view\n   * @param screenshotName - Screenshot image\n   */\n  captureTemplate(screenshotName: string): void {\n    const fullPageHTML = ngS3AnalyticsJS.constructHTMLPage(\n      this.processRegexOperations(this.document.head.innerHTML),\n      this.processRegexOperations(this.document.body.innerHTML)\n    );\n    this.analyticsService.saveScreenshotsInS3(fullPageHTML, screenshotName);\n  }\n\n\n  processRegexOperations(text: string): string {\n    return ngS3AnalyticsJS.doRegex(text, window.location.origin);\n  }\n}\n","import { Injectable, Input, ElementRef } from '@angular/core';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { fromEvent } from 'rxjs';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { EventLabels } from '../../types/event.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PointerService {\n\n  eventLabels = EventLabels;\n  eventDetails: any;\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-pointer') data: any = {};\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n  /**\n   * Track Mouse Movement\n   */\n  trackMouseMoveEvent() {\n    fromEvent(window, 'mousemove')\n      .subscribe((e: MouseEvent) => {\n        this.eventDetails = e;\n        this.sendData();\n      });\n  }\n\n  /**\n   * Pushing Mouse Move details\n   */\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.MOUSE_MOVE, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n@Injectable()\nexport class GlobalErrorHandler implements ErrorHandler {\n    eventLabels = EventLabels;\n    constructor(private injector: Injector) {\n        const analyticsService = this.injector.get(AnalyticsService);\n        if (window.console && console.error) {\n            const consoleErrorFnObject = console.error;\n            console.error = function (...error: any[]) {\n                const processedError = error.map(e => {\n                    if (typeof (e) === 'object') {\n                        return JSON.stringify(e);\n                    } else {\n                        return e;\n                    }\n                });\n                // tslint:disable-next-line: max-line-length\n                const analyticsBean: AnalyticsBean = analyticsService.setAnalyticsData(processedError, {}, this.eventLabels.CONSOLE_ERROR, '');\n                analyticsService.publishConsoleErrors(analyticsBean);\n                consoleErrorFnObject.call(console, error);\n            };\n        }\n    }\n\n    /** Implementing the method */\n    handleError(error: any) { }\n\n}\n","import { Directive, HostListener, ElementRef, Renderer2 } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { KeyStrokeEventType, EventLabels } from '../../types/event.types';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport * as uuid from 'uuid';\n\n// tslint:disable-next-line: directive-selector\n@Directive({ selector: '[track-keyStroke]' })\nexport class KeyStrokeDirective {\n\n    /** Event Labels Constants */\n    eventLabels = EventLabels;\n\n    /**\n     * Dependencies\n     * @param dataStorage\n     * @param analyticsService\n     * @param el - Element Reference\n     * @param renderer - Renderer\n     */\n    constructor(\n        private dataStorage: DataStorageService,\n        private analyticsService: AnalyticsService,\n        private el: ElementRef,\n        private renderer: Renderer2) {\n\n        /**\n         * if Id doesn't belongs to the element, which is being tracked,\n         * Adding a dynamic Id\n         */\n        if (!this.el.nativeElement.id) {\n            const dynamicId = `key_stroke_element_${uuid.v4()}`;\n            this.renderer.setAttribute(this.el.nativeElement, 'id', dynamicId);\n        }\n\n    }\n\n    /**\n     * Tracking Key press events using host listener\n     * Generating a data bean in a specified format\n     * @param $event - KeyPress Event\n     */\n    @HostListener('keypress', ['$event']) onKeyStroke($event: any) {\n        const keyStroke: KeyStrokeEventType = new KeyStrokeEventType();\n\n        keyStroke.elementId = $event.target.id;\n        keyStroke.key = $event.key;\n        keyStroke.code = $event.code;\n        keyStroke.keyCode = $event.keyCode;\n        keyStroke.isForm = $event.target.form !== undefined;\n        keyStroke.form = $event.target.form !== undefined ? $event.target.form.elements : [];\n        keyStroke.tagName = $event.target.tagName;\n        keyStroke.htmlElementType = $event.target.type;\n        keyStroke.value = $event.target.value;\n\n        this.sendData(keyStroke, $event);\n    }\n\n    /**\n     * Sending data\n     * @param keyStroke - Captured KeyStroke data\n     * @param eventDetails - Key Press event details\n     */\n    private sendData(keyStroke: KeyStrokeEventType, eventDetails: any): void {\n        const analyticsBean: AnalyticsBean =\n            this.analyticsService.setAnalyticsData({},\n                eventDetails,\n                this.eventLabels.KEY_STROKE, '',\n                { keyStrokeData: keyStroke });\n        this.dataStorage.appendToAnalyticsArray(analyticsBean);\n    }\n}\n","import { NgModule, ModuleWithProviders, ErrorHandler } from '@angular/core';\nimport { NgS3AnalyticsComponent } from './ng-s3-analytics.component';\nimport { Configuration } from './analytics-bean/analytics-bean';\nimport { ButtonDirective } from './directives/button/button.directive';\nimport { ScrollDirective } from './directives/scroll/scroll.directive';\nimport { ButtonHoverDirective } from './directives/button-hover/button-hover.directive';\nimport { EnvironmentService } from './services/environment/environment.service';\nimport { RouterService } from './services/router/router.service';\nimport { interval } from 'rxjs';\nimport { DataStorageService } from '../lib/services/data-storage/data-storage.service';\nimport { PointerService } from './services/pointer/pointer.service';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { GlobalErrorHandler } from './services/error-handler/errorHandler.service';\nimport { CookieService } from 'ngx-cookie-service';\nimport { KeyStrokeDirective } from './directives/key-stroke/key-stroke.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  declarations: [\n    NgS3AnalyticsComponent,\n    ButtonDirective,\n    ScrollDirective,\n    ButtonHoverDirective,\n    KeyStrokeDirective\n  ],\n  providers: [\n    DataStorageService,\n    EnvironmentService,\n    PointerService,\n    CookieService\n  ],\n  exports: [\n    NgS3AnalyticsComponent,\n    ButtonDirective,\n    ScrollDirective,\n    ButtonHoverDirective,\n    KeyStrokeDirective\n  ]\n})\nexport class NgS3AnalyticsModule {\n\n  private static environmentService = new EnvironmentService();\n\n  constructor(private routerService: RouterService, private dataStorage: DataStorageService, private pointerService: PointerService) {\n    window.addEventListener('beforeunload', (e) => {\n      this.dataStorage.pushDataArrayToS3();\n    });\n    interval(1000 * 2).subscribe(x => {\n      this.dataStorage.pushDataArrayToS3();\n    });\n    this.pointerService.trackMouseMoveEvent();\n    this.routerService.trackRouterEvents();\n  }\n  // Configuring the initial setup for s3 bucket and page loading\n  static forRoot(configuration: Configuration, isPageLoadingToBeDetected: boolean = false): ModuleWithProviders {\n    this.environmentService.setConfigurationToEnvironment(configuration, isPageLoadingToBeDetected);\n    // Assigning the configuration to environment variables\n    return {\n      ngModule: NgS3AnalyticsModule,\n      providers: [{ provide: ErrorHandler, useClass: GlobalErrorHandler }]\n    };\n  }\n\n\n}\n"],"names":["uuid.v4","interval"],"mappings":";;;;;;;;;;;;;AAAA;IAOE,iBAAiB;;;YALlB,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;ACJD;IAaE,iBAAiB;;;;IAEjB,QAAQ;KACP;;;YAdF,SAAS,SAAC;gBACT,QAAQ,EAAE,qBAAqB;gBAC/B,QAAQ,EAAE;;;;GAIT;gBACD,MAAM,EAAE,EAAE;aACX;;;;;;;;;ACVD,IAAW,WAAW,GAAG;IACrB,iBAAiB,EAAE,8DAA8D;IACjF,yBAAyB,EAAE,IAAI;IAC/B,eAAe,EAAE,EAAE;CACtB;;;;;;;;ICHG,WAAY,WAAW;IACvB,aAAc,aAAa;IAC3B,cAAe,cAAc;IAC7B,YAAa,YAAY;IACzB,QAAS,QAAQ;IACjB,eAAgB,eAAe;IAC/B,YAAa,YAAY;;;;IAIzB,kBAAmB,kBAAkB;IACrC,YAAa,wBAAwB;IACrC,qBAAsB,wBAAwB;;;CAcjD;;;;;;AC3BD;;;AAaA;;;;;;IAgBE,YACU,aAA4B,EAC5B,WAAuB;QADvB,kBAAa,GAAb,aAAa,CAAe;QAC5B,gBAAW,GAAX,WAAW,CAAY;;QAbjC,oBAAe,GAAQ,EAAE,CAAC;;QAE1B,gBAAW,GAAG,WAAW,CAAC;;QAE1B,cAAS,GAAG,SAAS,CAAC;QAUpB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE;YAC9D,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;aAAM;YACL,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;SAC5F;QACD,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;;;;;IAMO,YAAY;QAClB,IAAI,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;YACrD,IAAI,CAAC,SAAS,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;SACpE;aAAM;YACL,IAAI,CAAC,SAAS,GAAGA,EAAO,EAAE,CAAC;YAC3B,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SACnE;KACF;;;;;;IAMM,QAAQ,CAAC,IAAS;QACvB,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YACvB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;SAC5B;KACF;;;;;;;;;IASO,YAAY;;cACZ,OAAO,GAAG,WAAW,CAAC,eAAe;QAC3C,IAAI,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE,EAAE;YACtC,OAAO,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC;SAC9D;aAAM;YACL,OAAO,IAAI,CAAC;SACb;KACF;;;;;;;IAMO,gBAAgB,CAAC,IAA0B;QACjD,OAAO,IAAI,CAAC,GAAG;;;;QAAC,CAAC,MAAW;YAC1B,MAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;YACrC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SAC/B,EAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACf;;;;;;;IAMO,eAAe,CAAC,IAAS;;cACzB,QAAQ,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,OAAO;;cACzG,OAAO,GAAG,IAAI,WAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;QACvE,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,OAAO,CAAC,CAAC;KAC/E;;;;;;;;;IAQO,YAAY,CAAC,IAAY,EAAE,IAAS,EAAE,OAAoB;;cAC1D,GAAG,GAAG,GAAG,WAAW,CAAC,iBAAiB,GAAG,IAAI,EAAE;QAErD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,SAAS;;;;QAAC,GAAG,OAAO;;;;QAAE,GAAG;YAC7E,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAClB,EAAC,CAAC;KACJ;;;;;;;IAOM,mBAAmB,CAAC,YAAoB,EAAE,cAAsB;;cAC/D,QAAQ,GAAG,UAAU,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,IAAI,cAAc,OAAO;;cACtG,OAAO,GAAG,IAAI,WAAW,CAAC,EAAE,cAAc,EAAE,WAAW,EAAE,CAAC;QAChE,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;KACpD;;;;;;IAMM,oBAAoB,CAAC,IAAS;QAEnC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;;cAC7B,QAAQ,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,mBAAmB,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO;;cACpH,OAAO,GAAG,IAAI,WAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;QACvE,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KAC5C;;;;;;;;;;IAWM,gBAAgB,CACrB,WAAgB,EAAE,EAClB,YAAiB,EACjB,SAAiB,EACjB,cAAsB,EACtB,QAGC;;cACK,aAAa,GAAkB;YACnC,UAAU,EAAE,SAAS;YACrB,cAAc,EAAE,QAAQ,IAAI,QAAQ,CAAC,cAAc,GAAG,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACtH,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC,SAAS;YACnC,OAAO,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI;YAC7B,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM;YAC9B,UAAU,EAAE,GAAG,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,WAAW,EAAE;YACxD,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YACrD,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YACrD,UAAU,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,GAAG;YAChD,UAAU,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,GAAG;YAChD,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,UAAU,EAAE,cAAc;YAC1B,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;YACxC,GAAG,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;YAChD,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,aAAa,EAAE,QAAQ,IAAI,QAAQ,CAAC,aAAa;YACjD,WAAW,EAAE,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACxD,WAAW,EAAE,IAAI,CAAC,qBAAqB,EAAE;SAC1C;QACD,OAAO,aAAa,CAAC;KACtB;;;;;;;IAMO,eAAe,CAAC,KAAU;QAChC,OAAO,KAAK,KAAK,SAAS,GAAG,KAAK,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;KACrD;;;;;;;IAMO,cAAc,CAAC,aAAkB;QACvC,OAAO,aAAa,KAAK,SAAS,GAAG,aAAa,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;KACtE;;;;;;IAMO,qBAAqB;;cACrB,WAAW,GAAG,MAAM,CAAC,WAAW;QACtC,OAAO;YACL,UAAU,EAAE,WAAW,CAAC,UAAU;YAClC,UAAU,EAAE,WAAW,CAAC,UAAU;YAClC,MAAM,EAAE,WAAW,CAAC,MAAM;SAC3B,CAAC;KACH;;;;;;;IAMO,iBAAiB,CAAC,SAAc;;cAChC,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC;;cAC/C,MAAM,GAAG,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,EAAE;QAC3D,OAAO,MAAM,CAAC;KACf;;;;;;;IAMO,gBAAgB,CAAC,GAAW;;cAC5B,SAAS,GAAG,EAAE;QACpB,IAAI,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;;kBACjB,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;YAC9C,SAAS,CAAC,GAAG;;;;YAAC,KAAK;;sBACX,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC;gBAC/B,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;aAClC,EAAC,CAAC;SACJ;QACD,OAAO,SAAS,CAAC;KAClB;;;;;;IAKO,KAAK;QACX,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,SAAS;;;;QAChE,CAAC,GAAQ;YACP,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;YAC3B,IAAI,CAAC,aAAa,CAAC,GAAG,CACpB,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EACpD,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;SAC3D,EACF,CAAC;KACH;;;YA3OF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;YARQ,aAAa;YACb,UAAU;;;;;;;;ACLnB;;;;;IAkBE,YAAoB,iBAAmC,EAAU,IAAgB;QAA7D,sBAAiB,GAAjB,iBAAiB,CAAkB;QAAU,SAAI,GAAJ,IAAI,CAAY;QARjF,0BAAqB,GAAe,EAAE,CAAC;QAMvC,SAAI,GAAe,EAAE,CAAC;QACtB,mBAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QAEnB,iBAAY,GAAQ,EAAE,CAAC;QAC/B,UAAK,GAAG,CAAC,CAAC;KAF4E;;;;;IAGtF,SAAS,CAAC,IAAY;;YAChB,IAAI,GAAG,CAAC;QACZ,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE;YAClC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAClC,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,GAAG,CAAC;SAChC;aAAM,IAAI,EAAE,IAAI,KAAK,IAAI,CAAC,WAAW,CAAC,EAAE;YACvC,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,EAAE;gBACxD,IAAI,GAAG,KAAK,IAAI,EAAE;oBAChB,IAAI,GAAG,CAAC,CAAC;oBACT,MAAM;iBACP;aACF;YACD,IAAI,IAAI,KAAK,CAAC,EAAE;gBACd,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aACnC;YACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SACzB;KACF;;;;;IACD,sBAAsB,CAAC,IAAmB;QACxC,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE;YAClC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACrC;QACD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACtD;;;;IAED,iBAAiB;QACf,IAAI,CAAC,KAAK,EAAE,CAAC;;QAEb,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,EAAE;YACxD,IAAI,CAAC,gBAAgB,GAAG;gBACtB,OAAO,EAAE,GAAG;gBACZ,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;aAC/D,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACpB,IAAI,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gBAChD,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;aACxD;SACF;QACD,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QAC5B,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;YAC3B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;SAClC;KACF;;;;;IAED,eAAe,CAAC,YAAiB;QAC/B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;KAClC;;;;IAED,eAAe;QACb,OAAO,IAAI,CAAC,YAAY,CAAC;KAC1B;;;YAlEF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;YANQ,gBAAgB;YAChB,UAAU;;;;;;;;ACFnB;;;;AAcA;;;;;;IAaE,YAAoB,WAA+B,EAAU,gBAAkC;QAA3E,gBAAW,GAAX,WAAW,CAAoB;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;;;QAT3E,SAAI,GAAQ,EAAE,CAAC;QACnC,gBAAW,GAAG,WAAW,CAAC;KAQ0E;;;;;;IAMjE,OAAO,CAAC,MAAW;QACpD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;QAC3B,UAAU;;;QAAC;YACT,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB,GAAE,EAAE,CAAC,CAAC;KACR;;;;;IAGM,QAAQ;;cACP,aAAa,GACjB,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,EAAE,CAAC;QACzG,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;KACxD;;;YAnCF,SAAS,SAAC;;gBAET,QAAQ,EAAE,aAAa;aACxB;;;YAZQ,kBAAkB;YAElB,gBAAgB;;;mBAetB,KAAK,SAAC,WAAW;sBAejB,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;;;;;ACjCnC;;;;;IAiBI,YACY,gBAAkC,EAClC,WAA+B;QAD/B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,gBAAW,GAAX,WAAW,CAAoB;;;QALpB,SAAI,GAAQ,EAAE,CAAC;QACtC,gBAAW,GAAG,WAAW,CAAC;KAKrB;;;;;;IAGL,WAAW,CAAC,OAAY;QACpB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC;KACzC;;;;;;IAG0C,aAAa,CAAC,MAAW;QAChE,UAAU;;;QAAC;YACP,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SACzB,GAAE,GAAG,CAAC,CAAC;KACX;;;;;IAGM,QAAQ,CAAC,KAAU;;cAChB,aAAa,GACf,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC;QACzF,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;KAC1D;;;YAjCJ,SAAS,SAAC;;gBAEP,QAAQ,EAAE,gBAAgB;aAC7B;;;YARQ,gBAAgB;YAChB,kBAAkB;;;mBAYtB,KAAK,SAAC,cAAc;4BAcpB,YAAY,SAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;;;;;;;AC5B7C;;;;;IAkBE,YAAoB,WAA+B,EAAU,gBAAkC;QAA3E,gBAAW,GAAX,WAAW,CAAoB;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;QAL/F,gBAAW,GAAG,WAAW,CAAC;;;QAGE,SAAI,GAAQ,EAAE,CAAC;KAEyD;;;;;;IAG7D,WAAW,CAAC,MAAW;QAC5D,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;QAC3B,UAAU;;;QAAC;YACT,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB,GAAE,EAAE,CAAC,CAAC;KACR;;;;;IAGM,QAAQ;;cACP,aAAa,GACjB,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC;QACxG,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;KACxD;;;YA3BF,SAAS,SAAC;;gBAET,QAAQ,EAAE,qBAAqB;aAChC;;;YAPQ,kBAAkB;YADlB,gBAAgB;;;mBAetB,KAAK,SAAC,mBAAmB;0BAKzB,YAAY,SAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;;;;;;;ACpBvC;;;;;;;IAYE,6BAA6B,CAAC,aAA4B,EAAE,yBAAkC;QAC5F,WAAW,CAAC,iBAAiB,GAAG,aAAa,CAAC,iBAAiB,CAAC;QAChE,WAAW,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAClE,WAAW,CAAC,eAAe,GAAG,aAAa,CAAC,eAAe,CAAC;KAC7D;;;YAZF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;ACPD;;;;;;;IAeE,YAAoB,MAAc,EAAU,gBAAkC,EAAU,WAA+B,EAE3F,QAAa;QAFrB,WAAM,GAAN,MAAM,CAAQ;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;QAAU,gBAAW,GAAX,WAAW,CAAoB;QAE3F,aAAQ,GAAR,QAAQ,CAAK;QAJzC,gBAAW,GAAG,WAAW,CAAC;QAC1B,eAAU,GAAG,EAAE,CAAC;KAKf;;;;;IAKM,iBAAiB;;QAEtB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS;;;;QAAC,CAAC,KAAK;;YAEjC,IAAI,KAAK,YAAY,aAAa,EAAE;gBAClC,IAAI,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC,GAAG,EAAE;oBACjC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC;iBAC7B;aACF;iBAAM,IAAI,KAAK,YAAY,eAAe,EAAE;;gBAE3C,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;aAC/B;SACF,EAAC,CAAC;KACJ;;;;;;IAMM,iBAAiB,CAAC,KAAU;;cAC3B,cAAc,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;QACtD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,GAAG,cAAc,OAAO,EACtH,EAAE,cAAc,EAAE,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;QACjC,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;;QAEtC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QAC9D,UAAU;;;QAAC;YACT,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SAC7D,GAAE,CAAC,CAAC,CAAC;KACP;;;;;;IAOD,gBAAgB,CAAC,cAAsB;;cAC/B,KAAK,GAAG,IAAI;;cACZC,WAAQ,GAAG,WAAW;;;QAAC;YAC3B,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,KAAK,UAAU,EAAE;gBAC3C,aAAa,CAACA,WAAQ,CAAC,CAAC;gBACxB,KAAK,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;aACvC;SACF,GAAE,IAAI,CAAC;KACT;;;;;;IAMD,eAAe,CAAC,cAAsB;;cAC9B,YAAY,GAAG,eAAe,CAAC,iBAAiB,CACpD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,EACzD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAC1D;QACD,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;KACzE;;;;;IAGD,sBAAsB,CAAC,IAAY;QACjC,OAAO,eAAe,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KAC9D;;;YA9EF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;YATQ,MAAM;YACN,gBAAgB;YAChB,kBAAkB;4CActB,MAAM,SAAC,QAAQ;;;;;;;;ACjBpB;;;;;IAiBE,YAAoB,WAA+B,EAAU,gBAAkC;QAA3E,gBAAW,GAAX,WAAW,CAAoB;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;QAL/F,gBAAW,GAAG,WAAW,CAAC;;QAGF,SAAI,GAAQ,EAAE,CAAC;KAE6D;;;;;IAKpG,mBAAmB;QACjB,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC;aAC3B,SAAS;;;;QAAC,CAAC,CAAa;YACvB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;YACtB,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB,EAAC,CAAC;KACN;;;;;IAKM,QAAQ;;cACP,aAAa,GACjB,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,CAAC;QACvG,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;KACxD;;;YA9BF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;YARQ,kBAAkB;YAGlB,gBAAgB;;;mBAWtB,KAAK,SAAC,eAAe;;;;;;;;ACfxB;;;;IAOI,YAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;QADtC,gBAAW,GAAG,WAAW,CAAC;;cAEhB,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC;QAC5D,IAAI,MAAM,CAAC,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE;;kBAC3B,oBAAoB,GAAG,OAAO,CAAC,KAAK;YAC1C,OAAO,CAAC,KAAK;;;;YAAG,UAAU,GAAG,KAAY;;sBAC/B,cAAc,GAAG,KAAK,CAAC,GAAG;;;;gBAAC,CAAC;oBAC9B,IAAI,QAAQ,CAAC,CAAC,KAAK,QAAQ,EAAE;wBACzB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBAC5B;yBAAM;wBACH,OAAO,CAAC,CAAC;qBACZ;iBACJ,EAAC;;;sBAEI,aAAa,GAAkB,gBAAgB,CAAC,gBAAgB,CAAC,cAAc,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,EAAE,CAAC;gBAC9H,gBAAgB,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;gBACrD,oBAAoB,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aAC7C,CAAA,CAAC;SACL;KACJ;;;;;;IAGD,WAAW,CAAC,KAAU,KAAK;;;YAxB9B,UAAU;;;YAJwB,QAAQ;;;;;;;ACA3C;AASA;;;;;;;;IAYI,YACY,WAA+B,EAC/B,gBAAkC,EAClC,EAAc,EACd,QAAmB;QAHnB,gBAAW,GAAX,WAAW,CAAoB;QAC/B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,OAAE,GAAF,EAAE,CAAY;QACd,aAAQ,GAAR,QAAQ,CAAW;;QAb/B,gBAAW,GAAG,WAAW,CAAC;;;;;QAmBtB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,EAAE,EAAE;;kBACrB,SAAS,GAAG,sBAAsBD,EAAO,EAAE,EAAE;YACnD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;SACtE;KAEJ;;;;;;;IAOqC,WAAW,CAAC,MAAW;;cACnD,SAAS,GAAuB,IAAI,kBAAkB,EAAE;QAE9D,SAAS,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QACvC,SAAS,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;QAC3B,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QAC7B,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QACnC,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC;QACpD,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACrF,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;QAC1C,SAAS,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;QAC/C,SAAS,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;QAEtC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;KACpC;;;;;;;;IAOO,QAAQ,CAAC,SAA6B,EAAE,YAAiB;;cACvD,aAAa,GACf,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,EACrC,YAAY,EACZ,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,EAC/B,EAAE,aAAa,EAAE,SAAS,EAAE,CAAC;QACrC,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;KAC1D;;;YA/DJ,SAAS,SAAC,EAAE,QAAQ,EAAE,mBAAmB,EAAE;;;YANnC,kBAAkB;YADlB,gBAAgB;YADS,UAAU;YAAE,SAAS;;;0BA2ClD,YAAY,SAAC,UAAU,EAAE,CAAC,QAAQ,CAAC;;;;;;;AC3CxC;;;;;;IA+CE,YAAoB,aAA4B,EAAU,WAA+B,EAAU,cAA8B;QAA7G,kBAAa,GAAb,aAAa,CAAe;QAAU,gBAAW,GAAX,WAAW,CAAoB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAC/H,MAAM,CAAC,gBAAgB,CAAC,cAAc;;;;QAAE,CAAC,CAAC;YACxC,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC;SACtC,EAAC,CAAC;QACH,QAAQ,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,SAAS;;;;QAAC,CAAC;YAC5B,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC;SACtC,EAAC,CAAC;QACH,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE,CAAC;QAC1C,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;KACxC;;;;;;;IAED,OAAO,OAAO,CAAC,aAA4B,EAAE,4BAAqC,KAAK;QACrF,IAAI,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,aAAa,EAAE,yBAAyB,CAAC,CAAC;;QAEhG,OAAO;YACL,QAAQ,EAAE,mBAAmB;YAC7B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,kBAAkB,EAAE,CAAC;SACrE,CAAC;KACH;;AApBc,sCAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAC;;YA5B9D,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;oBACZ,gBAAgB;iBACjB;gBACD,YAAY,EAAE;oBACZ,sBAAsB;oBACtB,eAAe;oBACf,eAAe;oBACf,oBAAoB;oBACpB,kBAAkB;iBACnB;gBACD,SAAS,EAAE;oBACT,kBAAkB;oBAClB,kBAAkB;oBAClB,cAAc;oBACd,aAAa;iBACd;gBACD,OAAO,EAAE;oBACP,sBAAsB;oBACtB,eAAe;oBACf,eAAe;oBACf,oBAAoB;oBACpB,kBAAkB;iBACnB;aACF;;;YAnCQ,aAAa;YAEb,kBAAkB;YAClB,cAAc;;;;;;;;;;;;;;;"}
