{"version":3,"file":"codaglobal-ng-s3-analytics.js.map","sources":["ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.service.ts","ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.component.ts","ng://@codaglobal/ng-s3-analytics/lib/environment/environment.ts","ng://@codaglobal/ng-s3-analytics/lib/types/event.types.ts","ng://@codaglobal/ng-s3-analytics/lib/services/analytics/analytics.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/data-storage/data-storage.service.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/button/button.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/scroll/scroll.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/button-hover/button-hover.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/services/environment/environment.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/router/router.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/pointer/pointer.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/error-handler/errorHandler.service.ts","ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgS3AnalyticsService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ng-s3-analytics',\n  template: `\n    <p>\n      ng-s3-analytics works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgS3AnalyticsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export let environment = {\n    accessKeyId: '',\n    secretAccessKey: '',\n    sessionToken: '',\n    bucketName: {\n        authenticatedBucket: '',\n        publicBucket: '',\n        screenshotBucket: ''\n    },\n    fileName: '',\n    region: '',\n    isAuth: false,\n    isPageLoadingToBeDetected: true\n};\n\n\n","export enum EventLabels {\n    PAGE_LOAD = 'PAGE_LOAD',\n    MOUSE_HOVER = 'MOUSE_HOVER',\n    BUTTON_CLICK = 'BUTTON_CLICK',\n    MOUSE_MOVE = 'MOUSE_MOVE',\n    SCROLL = 'SCROLL',\n    CONSOLE_ERROR = 'CONSOLE_ERROR'\n}\n","import { Injectable } from '@angular/core';\nimport * as AWS from 'aws-sdk';\nimport { environment } from '../../environment/environment';\nimport * as uuid from 'uuid';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { CookieService } from 'ngx-cookie-service';\nimport { HttpClient } from '@angular/common/http';\nimport { EventLabels } from '../../types/event.types';\n/**\n * Analytics Service\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalyticsService {\n\n  /**\n   * SessionId of plugin\n   */\n  sessionId: string;\n  demographicInfo: any = {};\n  eventLabels = EventLabels;\n  constructor(private cookieService: CookieService, private httpService: HttpClient) {\n    if (!this.cookieService.check('demographic-info')) {\n      this.getIp();\n    } else {\n      this.demographicInfo = JSON.parse(this.cookieService.get('demographic-info'));\n    }\n    this.setSessionId();\n  }\n\n  /**\n   * Checking whether sessionId present in cookie or not\n   * if no session id cookie present, adding new session id otherwise reusing the session id value\n   */\n  private setSessionId(): void {\n    if (sessionStorage.getItem('ngS3AnalyticsSessionId')) {\n      this.sessionId = sessionStorage.getItem('ngS3AnalyticsSessionId');\n    } else {\n      this.sessionId = uuid.v4();\n      sessionStorage.setItem('ngS3AnalyticsSessionId', this.sessionId);\n    }\n  }\n\n  /**\n   * Pushing Analytics data to different bucket based on Authentication flag\n   * @param data \n   */\n  public pushData(data: any): void {\n    if (environment.isAuth) {\n      this.publishTOAuthS3(data);\n    } else {\n      this.publishTOUnAuthS3(data);\n    }\n  }\n\n  /**\n   * Pushing data to UnAuthenticated Bucket S3\n   * @param data \n   */\n  private publishTOUnAuthS3(data: any): void {\n\n    /*** Construct S3 Bucket object */\n    const s3Bucket: AWS.S3 = this.constructS3Object();\n\n    /*** Setting the params for s3 */\n    const params: { Bucket: string, Key: string, Body: string, ContentType: string } = {\n      Bucket: environment.bucketName.publicBucket,\n      // tslint:disable-next-line: max-line-length\n      Key: `${new Date().toISOString().split('T')[0]}_${this.sessionId}_${new Date().toISOString()}.json`,\n      Body: this.processForAthena(data.eventValues),\n      ContentType: 'json'\n    };\n    /*** Pushing the data to s3 */\n    s3Bucket.putObject(params, (err: AWS.AWSError, resData: any) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  /**\n   * Converting JSON Array to string \n   * @param data \n   */\n  processForAthena(data: Array<AnalyticsBean>): string {\n    return data.map((object: any) => {\n      object['sessionId'] = this.sessionId;\n      return JSON.stringify(object);\n    }).join('\\n');\n  }\n\n  /**\n    * Pushing data to Authenticated Bucket S3\n    * @param data \n    */\n  publishTOAuthS3(data: any) {\n\n    /*** Construct S3 Bucket object */\n    const s3Bucket: AWS.S3 = this.constructS3Object();\n    /*** Setting the params for s3 */\n    const params = {\n      Bucket: environment.bucketName.authenticatedBucket,\n      Key: `${new Date().toISOString().split('T')[0]}_${this.sessionId}_${new Date().toISOString()}.json`,\n      Body: this.processForAthena(data.eventValues),\n      ContentType: 'json'\n    };\n    /*** Pushing the data to s3 */\n    s3Bucket.putObject(params, (err: AWS.AWSError, resData: any) => {\n      if (err) {\n        console.error('error', err);\n      }\n    });\n\n  }\n\n\n  /**\n   * Construct S3 Object using AWS SDK\n   */\n  private constructS3Object(): AWS.S3 {\n    return new AWS.S3({\n      accessKeyId: environment.accessKeyId,\n      secretAccessKey: environment.secretAccessKey,\n      region: environment.region\n    });\n  }\n\n  /**\n   * Uploading captured base64 image to S3\n   * @param image - Base64 String\n   * @param screenshotName - Screenshot name linked with pageLoaded data\n   */\n  public saveScreenshotsInS3(htmlTemplate: string, screenshotName: string): void {\n    // constructing the S3 object\n    const s3Bucket: AWS.S3 = this.constructS3Object();\n    // preparing data to be pushed to bucket\n    const params = {\n      Bucket: environment.bucketName.screenshotBucket,\n      Key: `${new Date().toISOString().split('T')[0]}/${this.sessionId}/screenshots/${screenshotName}.html`,\n      Body: htmlTemplate,\n      ContentType: 'text/html'\n    };\n\n    /** Pushing to S3 bucket */\n    s3Bucket.upload(params, (err: AWS.AWSError, resData: any) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  /**\n   * Pushing console errors to S3 bucket\n   * @param data \n   */\n  public publishConsoleErrors(data: any): void {\n\n    // Configuring the s3\n    const s3Bucket: AWS.S3 = this.constructS3Object();\n    data['sessionId'] = this.sessionId;\n\n    // Setting the params for s3\n    const params = {\n      Bucket: environment.bucketName.authenticatedBucket,\n      Key: `${new Date().toISOString().split('T')[0]}_${this.sessionId}_console_errors_${new Date().getTime()}.json`,\n      Body: JSON.stringify(data),\n      ContentType: 'json'\n    };\n    // Pushing the data to s3\n    s3Bucket.putObject(params, (err: AWS.AWSError, resData: any) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n\n\n\n  /**\n   * Setting analytics object to be saved in S3 bucket\n   * @param userData - Data transferred to Event Directive\n   * @param eventDetails - Position of events\n   * @param eventName  - Type of event\n   * @param screenshotName  - file name of saved screenshot if the event is PageLoaded\n   */\n  setAnalyticsData(\n    userData: any = {},\n    eventDetails: any,\n    eventName: string,\n    screenshotName: string,\n    eventComponent?: string): AnalyticsBean {\n    const analyticsBean: AnalyticsBean = {\n      eventLabel: eventName,\n      eventComponent: eventComponent ? eventComponent : window.location.pathname.split('?')[0],\n      browser: window.navigator.userAgent,\n      fullURL: window.location.href,\n      resolution: window.innerWidth + 'x' + window.innerHeight,\n      xCoord: eventDetails['clientX'] !== undefined ? eventDetails['clientX'].toString() : '0' || '0',\n      yCoord: eventDetails['clientY'] !== undefined ? eventDetails['clientY'].toString() : '0' || '0',\n      pageXCoord: window.pageXOffset.toString() || '0',\n      pageYCoord: window.pageYOffset.toString() || '0',\n      eventTime: new Date().toISOString(),\n      screenshot: screenshotName,\n      additionalInfo: JSON.stringify(userData),\n      utm: this.getUTMParameters(window.location.href),\n      demographicInfo: this.demographicInfo,\n      // tslint:disable-next-line: max-line-length\n      htmlElement: eventDetails['target'] ? eventDetails['target']['innerHTML'] : ''\n    };\n    return analyticsBean;\n  }\n\n  /**\n   * Getting UTM Parameters by processing current pageURL\n   * @param url - Page URL\n   */\n  private getUTMParameters(url: string): any {\n    const utmObject = {};\n    if (url.includes('utm')) {\n      const utmParams = url.split('?')[1].split('&');\n      utmParams.map(param => {\n        const params = param.split('=');\n        utmObject[params[0]] = params[1];\n      });\n    }\n    return utmObject;\n  }\n\n  /**\n   * Set user demographic information in cookies\n   */\n  private getIp(): void {\n    this.httpService.get('https://ipapi.co/json/').subscribe(\n      (res: any) => {\n        this.demographicInfo = res;\n        this.cookieService.set('demographic-info', JSON.stringify(res), new Date(new Date().getTime() + (1000 * 60 * 60 * 24 * 7)));\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { HttpClient } from '@angular/common/http';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataStorageService {\n\n  allDataAnalyticsArray: Array<any> = [];\n  allDataAnalytics: {\n    pageUrl: string,\n    eventValues: Array<any>\n  };\n  previousUrl: string;\n  keys: Array<any> = [];\n  eventCollector = new Map();\n  constructor(private analyticalService: AnalyticsService, private http: HttpClient) { }\n  private routeDetails: any = [];\n  count = 0;\n  setUrlKey(data: string) {\n    let flag = 0;\n    if (this.previousUrl === undefined) {\n      this.eventCollector.set(data, []);\n      this.previousUrl = data || '/';\n    } else if (!(data === this.previousUrl)) {\n      for (const key of Array.from(this.eventCollector.keys())) {\n        if (key === data) {\n          flag = 1;\n          break;\n        }\n      }\n      if (flag === 0) {\n        this.eventCollector.set(data, []);\n      }\n      this.previousUrl = data;\n    }\n  }\n  appendToAnalyticsArray(data: AnalyticsBean) {\n    if (this.previousUrl === undefined) {\n      this.setUrlKey(data.eventComponent);\n    }\n    this.eventCollector.get(this.previousUrl).push(data);\n  }\n\n  pushDataArrayToS3() {\n    this.count++;\n    // this.allDataAnalyticsMap = JSON.parse(JSON.stringify(Array.from(this.eventCollector.keys())));\n    for (const key of Array.from(this.eventCollector.keys())) {\n      this.allDataAnalytics = {\n        pageUrl: key,\n        eventValues: Array.from(this.eventCollector.get(key).values())\n      };\n      this.keys.push(key);\n      if (this.allDataAnalytics.eventValues.length > 0) {\n        this.analyticalService.pushData(this.allDataAnalytics);\n      }\n    }\n    this.eventCollector.clear();\n    for (const key of this.keys) {\n      this.eventCollector.set(key, []);\n    }\n  }\n\n  setRouteDetails(routeDetails: any) {\n    this.routeDetails = routeDetails;\n  }\n\n  getRouteDetails() {\n    return this.routeDetails;\n  }\n\n}\n","import { Directive, Input, HostListener } from '@angular/core';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { EventLabels } from '../../types/event.types';\n\n/**\n * Button Directive to track click event\n * Selector can be added to any HTML Element\n */\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[track-btn]'\n})\nexport class ButtonDirective {\n\n  // Gets important data about the button explicitly from the application\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-btn') data: any = {};\n  eventLabels = EventLabels;\n  eventDetails: any;\n\n  /**\n   * Button Tracking - Constructor\n   * @param dataStorage - DataStorageService\n   * @param analyticsService\n   */\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n\n  /**\n   *  Listen to button click actions\n   */\n  @HostListener('click', ['$event']) onClick($event: any) {\n    this.eventDetails = $event;\n    setTimeout(() => {\n      this.sendData();\n    }, 10);\n  }\n\n  /** Sending data on button click */\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.BUTTON_CLICK, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n","import { Directive, OnChanges, HostListener, Input } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[track-scroll]'\n})\nexport class ScrollDirective implements OnChanges {\n\n    // Gets important data about the component explicitly from the application\n    // tslint:disable-next-line: no-input-rename\n    @Input('track-scroll') data: any = {};\n    eventLabels = EventLabels;\n\n    constructor(\n        private analyticsService: AnalyticsService,\n        private dataStorage: DataStorageService\n    ) { }\n\n    // Capture the change in data\n    ngOnChanges(changes: any) {\n        this.data = changes.data.currentValue;\n    }\n\n    // Triggered when any scroll event occurs\n    @HostListener('window:scroll', ['$event']) onScrollEvent($event: any) {\n        setTimeout(() => {\n            this.sendData($event);\n        }, 100);\n    }\n\n\n    public sendData(event: any): void {\n        const analyticsBean: AnalyticsBean =\n            this.analyticsService.setAnalyticsData(this.data, event, this.eventLabels.SCROLL, '');\n        this.dataStorage.appendToAnalyticsArray(analyticsBean);\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[track-buttonHover]'\n})\nexport class ButtonHoverDirective {\n  /** */\n  eventDetails: any;\n  eventLabels = EventLabels;\n  // Gets important data about the button explicitly from the application\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-buttonHover') data: any = {};\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n  // Listen to button hover actions\n  @HostListener('mouseover', ['$event']) onMouseOver($event: any) {\n    this.eventDetails = $event;\n    setTimeout(() => {\n      this.sendData();\n    }, 10);\n  }\n\n  // Sending data on button hover\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.MOUSE_HOVER, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { environment } from '../../environment/environment';\nimport { CredentialsBean } from '../../analytics-bean/analytics-bean';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class EnvironmentService {\n\n  // Sets Whether the user is authenticated or not\n  setAuthentication(isAuth: boolean) {\n    environment.isAuth = isAuth;\n  }\n\n  // Setting credentials on environment\n  setCredentialsToEnvironment(credentials: CredentialsBean, isPageLoadingToBeDetected: boolean) {\n    environment.accessKeyId = credentials.accessKeyId;\n    environment.fileName = credentials.fileName;\n    environment.secretAccessKey = credentials.secretAccessKey;\n    environment.sessionToken = credentials.sessionToken;\n    environment.region = credentials.region;\n    environment.isPageLoadingToBeDetected = isPageLoadingToBeDetected;\n    if (credentials.bucketName.authenticatedBucket !== '' && credentials.bucketName.publicBucket !== '') {\n      environment.bucketName = {\n        authenticatedBucket: credentials.bucketName.authenticatedBucket,\n        publicBucket: credentials.bucketName.publicBucket,\n        screenshotBucket: credentials.bucketName.screenshotBucket\n      };\n    } else {\n      const bucketName = (credentials.bucketName.authenticatedBucket === '') ? credentials.bucketName.publicBucket :\n        credentials.bucketName.authenticatedBucket;\n      environment.bucketName = {\n        authenticatedBucket: bucketName,\n        publicBucket: bucketName,\n        screenshotBucket: credentials.bucketName.screenshotBucket\n      };\n    }\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Router, NavigationEnd, NavigationError } from '@angular/router';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { EventLabels } from '../../types/event.types';\ndeclare let ngS3AnalyticsJS: any;\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouterService {\n  analyticsData: AnalyticsBean;\n  eventLabels = EventLabels;\n  navigateOn = '';\n  constructor(private routes: Router, private analyticsService: AnalyticsService, private dataStorage: DataStorageService,\n    // tslint:disable-next-line: deprecation\n    @Inject(DOCUMENT) private document: any) {\n\n  }\n\n  /**\n   * Tracking router events\n   */\n  public trackRouterEvents(): void {\n    /** Triggered when current page is loaded */\n    this.routes.events.subscribe((event) => {\n      /** Triggered when NavigationEnd event occurs */\n      if (event instanceof NavigationEnd) {\n        if (this.navigateOn !== event.url) {\n          this.analyticsPushData(event);\n          this.navigateOn = event.url;\n        }\n      } else if (event instanceof NavigationError) {\n        /** Triggered when NavigationError event occurs */\n        this.analyticsPushData(event);\n      }\n    });\n  }\n\n  /**\n   * Pushing analytics data\n   * @param event - Router Event\n   */\n  public analyticsPushData(event: any): void {\n    const screenshotName = new Date().getTime().toString();\n    this.analyticsData = this.analyticsService.setAnalyticsData({}, {}, this.eventLabels.PAGE_LOAD, `${screenshotName}.html`, event.url);\n    this.waitTillPageLoad(screenshotName);\n    // Data is send only when user configure the page loading to be true\n    this.dataStorage.setUrlKey(this.analyticsData.eventComponent);\n    setTimeout(() => {\n      this.dataStorage.appendToAnalyticsArray(this.analyticsData);\n    }, 0);\n  }\n\n\n  /**\n   * Waiting for page to load completely\n   * @param event \n   */\n  waitTillPageLoad(screenshotName: string) {\n    const _self = this;\n    const interval = setInterval(function () {\n      if (this.document.readyState === 'complete') {\n        clearInterval(interval);\n        _self.captureTemplate(screenshotName);\n      }\n    }, 1000);\n  }\n\n  /**\n   * Capture template of loaded view\n   * @param screenshotName - Screenshot image\n   */\n  captureTemplate(screenshotName: string): void {\n    const fullPageHTML = ngS3AnalyticsJS.constructHTMLPage(\n      this.processRegexOperations(this.document.head.innerHTML), this.processRegexOperations(this.document.body.innerHTML))\n    this.analyticsService.saveScreenshotsInS3(fullPageHTML, screenshotName);\n  }\n\n\n  processRegexOperations(text: string): string {\n    return ngS3AnalyticsJS.doRegex(text, window.location.origin);\n  }\n}\n","import { Injectable, Input, ElementRef } from '@angular/core';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { fromEvent } from 'rxjs';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { EventLabels } from '../../types/event.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PointerService {\n\n  eventLabels = EventLabels;\n  eventDetails: any;\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-pointer') data: any = {};\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n  /**\n   * Track Mouse Movement\n   */\n  trackMouseMoveEvent() {\n    fromEvent(window, 'mousemove')\n      .subscribe((e: MouseEvent) => {\n        this.eventDetails = e;\n        this.sendData();\n      });\n  }\n\n  /**\n   * Pushing Mouse Move details\n   */\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.MOUSE_MOVE, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n@Injectable()\nexport class GlobalErrorHandler implements ErrorHandler {\n    eventLabels = EventLabels;\n    constructor(private injector: Injector) {\n        const analyticsService = this.injector.get(AnalyticsService);\n        if (window.console && console.error) {\n            const consoleErrorFnObject = console.error;\n            console.error = function (...error: any[]) {\n                const processedError = error.map(e => {\n                    if (typeof (e) === 'object') {\n                        return JSON.stringify(e);\n                    } else {\n                        return e;\n                    }\n                });\n                // tslint:disable-next-line: max-line-length\n                const analyticsBean: AnalyticsBean = analyticsService.setAnalyticsData(processedError, {}, this.eventLabels.CONSOLE_ERROR, '');\n                analyticsService.publishConsoleErrors(analyticsBean);\n                consoleErrorFnObject.call(console, error);\n            };\n        }\n    }\n\n    /** Implementing the method */\n    handleError(error: any) { }\n\n}\n","import { NgModule, ModuleWithProviders, ErrorHandler } from '@angular/core';\nimport { NgS3AnalyticsComponent } from './ng-s3-analytics.component';\nimport { CredentialsBean } from './analytics-bean/analytics-bean';\nimport { ButtonDirective } from './directives/button/button.directive';\nimport { ScrollDirective } from './directives/scroll/scroll.directive';\nimport { ButtonHoverDirective } from './directives/button-hover/button-hover.directive';\nimport { EnvironmentService } from './services/environment/environment.service';\nimport { RouterService } from './services/router/router.service';\nimport { interval } from 'rxjs';\nimport { DataStorageService } from '../lib/services/data-storage/data-storage.service';\nimport { PointerService } from './services/pointer/pointer.service';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { GlobalErrorHandler } from './services/error-handler/errorHandler.service';\nimport { CookieService } from 'ngx-cookie-service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  declarations: [\n    NgS3AnalyticsComponent,\n    ButtonDirective,\n    ScrollDirective,\n    ButtonHoverDirective,\n  ],\n  providers: [\n    DataStorageService,\n    EnvironmentService,\n    PointerService,\n    CookieService\n  ],\n  exports: [\n    NgS3AnalyticsComponent,\n    ButtonDirective,\n    ScrollDirective,\n    ButtonHoverDirective,\n  ]\n})\nexport class NgS3AnalyticsModule {\n\n  private static environmentService = new EnvironmentService();\n\n  constructor(private routerService: RouterService, private dataStorage: DataStorageService, private pointerService: PointerService) {\n    window.addEventListener('beforeunload', (e) => {\n      this.dataStorage.pushDataArrayToS3();\n    });\n    interval(1000 * 2).subscribe(x => {\n      this.dataStorage.pushDataArrayToS3();\n    });\n    this.pointerService.trackMouseMoveEvent();\n    this.routerService.trackRouterEvents();\n  }\n  // Configuring the initial setup for s3 bucket and page loading\n  static forRoot(credentials: CredentialsBean, isPageLoadingToBeDetected: boolean = false): ModuleWithProviders {\n    this.environmentService.setCredentialsToEnvironment(credentials, isPageLoadingToBeDetected);\n    // Assigning the credentials to environment variables\n    return {\n      ngModule: NgS3AnalyticsModule,\n      providers: [{ provide: ErrorHandler, useClass: GlobalErrorHandler }]\n    };\n  }\n\n\n}\n"],"names":["uuid.v4","AWS.S3","interval"],"mappings":"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"}
