{"version":3,"sources":["ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.service.ts","ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.component.ts","null","ng://@codaglobal/ng-s3-analytics/lib/environment/environment.ts","ng://@codaglobal/ng-s3-analytics/lib/services/analytics/analytics.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/data-storage/data-storage.service.ts","ng://@codaglobal/ng-s3-analytics/lib/types/event.types.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/button/button.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/scroll/scroll.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/button-hover/button-hover.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/services/environment/environment.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/router/router.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/pointer/pointer.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/error-handler/errorHandler.service.ts","ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.module.ts"],"names":["NgS3AnalyticsService","Injectable","args","providedIn","NgS3AnalyticsComponent","prototype","ngOnInit","Component","selector","template","styles","__values","o","m","Symbol","iterator","i","call","next","length","value","done","environment","accessKeyId","secretAccessKey","sessionToken","bucketName","authenticatedBucket","publicBucket","screenshotBucket","fileName","region","isAuth","isPageLoadingToBeDetected","AnalyticsService","cookieService","httpService","this","demographicInfo","check","JSON","parse","get","getIp","setSessionId","sessionId","uuid.v4","set","Date","getTime","pushData","data","publishTOAuthS3","publishTOUnAuthS3","s3Bucket","constructS3Object","params","Bucket","Key","toISOString","split","Body","processForAthena","eventValues","ContentType","putObject","err","resData","console","error","_this","map","object","stringify","join","AWS.S3","saveScreenshotsInS3","htmlTemplate","screenshotName","upload","publishConsoleErrors","log","setAnalyticsData","userData","eventDetails","eventName","eventComponent","eventLabel","window","location","pathname","browser","navigator","userAgent","fullURL","href","resolution","innerWidth","innerHeight","xCoord","undefined","toString","yCoord","pageXCoord","pageXOffset","pageYCoord","pageYOffset","eventTime","screenshot","additionalInfo","utm","getUTMParameters","url","utmObject","includes","param","subscribe","res","CookieService","HttpClient","DataStorageService","analyticalService","http","allDataAnalyticsArray","keys","eventCollector","Map","routeDetails","count","setUrlKey","flag","previousUrl","_b","tslib_1.__values","Array","from","_c","appendToAnalyticsArray","push","pushDataArrayToS3","_d","key","allDataAnalytics","pageUrl","values","clear","_e","_f","setRouteDetails","getRouteDetails","PAGE_LOAD","MOUSE_HOVER","BUTTON_CLICK","MOUSE_MOVE","SCROLL","CONSOLE_ERROR","ButtonDirective","dataStorage","analyticsService","eventLabels","EventLabels","onClick","$event","setTimeout","sendData","analyticsBean","Directive","Input","HostListener","ScrollDirective","ngOnChanges","changes","currentValue","onScrollEvent","event","ButtonHoverDirective","onMouseOver","EnvironmentService","setAuthentication","setCredentialsToEnvironment","credentials","RouterService","routes","document","trackRouterEvents","events","NavigationEnd","analyticsPushData","NavigationError","analyticsData","waitTillPageLoad","_self","interval","setInterval","readyState","clearInterval","captureTemplate","fullPageHTML","processRegexOperations","head","innerHTML","body","text","replace","origin","Router","Inject","DOCUMENT","PointerService","trackMouseMoveEvent","fromEvent","e","GlobalErrorHandler","injector","consoleErrorFnObject_1","_i","arguments","processedError","handleError","Injector","NgS3AnalyticsModule","routerService","pointerService","x","forRoot","environmentService","ngModule","providers","provide","ErrorHandler","useClass","NgModule","imports","CommonModule","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgS3AnalyticsService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ng-s3-analytics',\n  template: `\n    <p>\n      ng-s3-analytics works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgS3AnalyticsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export let environment = {\n    accessKeyId: '',\n    secretAccessKey: '',\n    sessionToken: '',\n    bucketName: {\n        authenticatedBucket: '',\n        publicBucket: '',\n        screenshotBucket: ''\n    },\n    fileName: '',\n    region: '',\n    isAuth: false,\n    isPageLoadingToBeDetected: true\n};\n\n\n","import { Injectable } from '@angular/core';\nimport * as AWS from 'aws-sdk';\nimport { environment } from '../../environment/environment';\nimport * as uuid from 'uuid';\nimport * as bf from 'buffer';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { CookieService } from 'ngx-cookie-service';\nimport { HttpClient } from '@angular/common/http';\nimport * as moment_ from 'moment';\nconst moment = moment_;\n/**\n * Analytics Service\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalyticsService {\n\n  /**\n   * SessionId of plugin\n   */\n  sessionId: string;\n  demographicInfo: any = {};\n  constructor(private cookieService: CookieService, private httpService: HttpClient) {\n    if (!this.cookieService.check('demographic-info')) {\n      this.getIp();\n    } else {\n      this.demographicInfo = JSON.parse(this.cookieService.get('demographic-info'));\n    }\n    this.setSessionId();\n  }\n\n  /**\n   * Checking whether sessionId present in cookie or not\n   * if no session id cookie present, adding new session id otherwise reusing the session id value\n   */\n  private setSessionId(): void {\n    if (this.cookieService.check('ngS3AnalyticsSessionId')) {\n      this.sessionId = this.cookieService.get('ngS3AnalyticsSessionId');\n    } else {\n      this.sessionId = uuid.v4();\n      this.cookieService.set('ngS3AnalyticsSessionId', this.sessionId, new Date(new Date().getTime() + (1000 * 60 * 60)));\n    }\n  }\n\n  /**\n   * Pushing Analytics data to different bucket based on Authentication flag\n   * @param data \n   */\n  public pushData(data: any): void {\n    if (environment.isAuth) {\n      this.publishTOAuthS3(data);\n    } else {\n      this.publishTOUnAuthS3(data);\n    }\n  }\n\n  /**\n   * Pushing data to UnAuthenticated Bucket S3\n   * @param data \n   */\n  private publishTOUnAuthS3(data: any): void {\n\n    /*** Construct S3 Bucket object */\n    const s3Bucket: AWS.S3 = this.constructS3Object();\n\n    /*** Setting the params for s3 */\n    const params: { Bucket: string, Key: string, Body: string, ContentType: string } = {\n      Bucket: environment.bucketName.publicBucket,\n      // tslint:disable-next-line: max-line-length\n      Key: `${new Date().toISOString().split('T')[0]}_${this.sessionId}_${new Date().toISOString()}.json`,\n      Body: this.processForAthena(data.eventValues),\n      ContentType: 'json'\n    };\n    /*** Pushing the data to s3 */\n    s3Bucket.putObject(params, (err: AWS.AWSError, resData: any) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  /**\n   * Converting JSON Array to string \n   * @param data \n   */\n  processForAthena(data: Array<AnalyticsBean>): string {\n    return data.map((object: any) => {\n      object['sessionId'] = this.sessionId;\n      return JSON.stringify(object);\n    }).join('\\n');\n  }\n\n  /**\n    * Pushing data to Authenticated Bucket S3\n    * @param data \n    */\n  publishTOAuthS3(data: any) {\n\n    /*** Construct S3 Bucket object */\n    const s3Bucket: AWS.S3 = this.constructS3Object();\n    /*** Setting the params for s3 */\n    const params = {\n      Bucket: environment.bucketName.authenticatedBucket,\n      Key: `${new Date().toISOString().split('T')[0]}_${this.sessionId}_${new Date().toISOString()}.json`,\n      Body: this.processForAthena(data.eventValues),\n      ContentType: 'json'\n    };\n    /*** Pushing the data to s3 */\n    s3Bucket.putObject(params, (err: AWS.AWSError, resData: any) => {\n      if (err) {\n        console.error('error', err);\n      }\n    });\n\n  }\n\n\n  /**\n   * Construct S3 Object using AWS SDK\n   */\n  private constructS3Object(): AWS.S3 {\n    return new AWS.S3({\n      accessKeyId: environment.accessKeyId,\n      secretAccessKey: environment.secretAccessKey,\n      region: environment.region\n    });\n  }\n\n  /**\n   * Uploading captured base64 image to S3\n   * @param image - Base64 String\n   * @param screenshotName - Screenshot name linked with pageLoaded data\n   */\n  public saveScreenshotsInS3(htmlTemplate: string, screenshotName: string): void {\n    // converting the base64 to buffer data\n    // const buffer: Buffer = bf.Buffer.from(image.replace(/^data:image\\/\\w+;base64,/, ''), 'base64');\n    // const buffer: Buffer = bf.Buffer.from(image, 'base64');\n    // constructing the S3 object\n    const s3Bucket: AWS.S3 = this.constructS3Object();\n    // preparing data to be pushed to bucket\n    const params = {\n      Bucket: environment.bucketName.screenshotBucket,\n      Key: `${new Date().toISOString().split('T')[0]}/${this.sessionId}/screenshots/${screenshotName}.html`,\n      Body: htmlTemplate,\n      ContentType: 'text/html'\n    };\n\n    /** Pushing to S3 bucket */\n    s3Bucket.upload(params, (err: AWS.AWSError, resData: any) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  /**\n   * Pushing console errors to S3 bucket\n   * @param data \n   */\n  public publishConsoleErrors(data: any): void {\n\n    // Configuring the s3\n    const s3Bucket: AWS.S3 = this.constructS3Object();\n    data['sessionId'] = this.sessionId;\n\n    // Setting the params for s3\n    const params = {\n      Bucket: environment.bucketName.authenticatedBucket,\n      Key: `${new Date().toISOString().split('T')[0]}_${this.sessionId}_console_errors_${new Date().getTime()}.json`,\n      Body: JSON.stringify(data),\n      ContentType: 'json'\n    };\n    // Pushing the data to s3\n    s3Bucket.putObject(params, (err: AWS.AWSError, resData: any) => {\n      if (err) {\n        console.log(err);\n      }\n    });\n  }\n\n\n\n  /**\n   * Setting analytics object to be saved in S3 bucket\n   * @param userData - Data transferred to Event Directive\n   * @param eventDetails - Position of events\n   * @param eventName  - Type of event\n   * @param screenshotName  - file name of saved screenshot if the event is PageLoaded\n   */\n  setAnalyticsData(\n    userData: any = {},\n    eventDetails: any,\n    eventName: string,\n    screenshotName: string,\n    eventComponent?: string): AnalyticsBean {\n    const analyticsBean: AnalyticsBean = {\n      eventLabel: eventName,\n      eventComponent: eventComponent ? eventComponent : window.location.pathname.split('?')[0],\n      browser: window.navigator.userAgent,\n      fullURL: window.location.href,\n      resolution: window.innerWidth + 'x' + window.innerHeight,\n      xCoord: eventDetails['clientX'] !== undefined ? eventDetails['clientX'].toString() : '0' || '0',\n      yCoord: eventDetails['clientY'] !== undefined ? eventDetails['clientY'].toString() : '0' || '0',\n      pageXCoord: window.pageXOffset.toString() || '0',\n      pageYCoord: window.pageYOffset.toString() || '0',\n      eventTime: new Date().toISOString(),\n      screenshot: screenshotName,\n      additionalInfo: JSON.stringify(userData),\n      utm: this.getUTMParameters(window.location.href),\n      demographicInfo: this.demographicInfo\n    };\n    return analyticsBean;\n  }\n\n  /**\n   * Getting UTM Parameters by processing current pageURL\n   * @param url - Page URL\n   */\n  private getUTMParameters(url: string): any {\n    const utmObject = {};\n    if (url.includes('utm')) {\n      const utmParams = url.split('?')[1].split('&');\n      utmParams.map(param => {\n        const params = param.split('=');\n        utmObject[params[0]] = params[1];\n      });\n    }\n    return utmObject;\n  }\n\n  /**\n   * Set user demographic information in cookies\n   */\n  private getIp(): void {\n    this.httpService.get('https://ipapi.co/json/').subscribe(\n      (res: any) => {\n        this.demographicInfo = res;\n        this.cookieService.set('demographic-info', JSON.stringify(res), new Date(new Date().getTime() + (1000 * 60 * 60 * 24 * 7)));\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { HttpClient } from '@angular/common/http';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataStorageService {\n\n  allDataAnalyticsArray: Array<any> = [];\n  allDataAnalytics: {\n    pageUrl: string,\n    eventValues: Array<any>\n  };\n  previousUrl: string;\n  keys: Array<any> = [];\n  eventCollector = new Map();\n  constructor(private analyticalService: AnalyticsService, private http: HttpClient) { }\n  private routeDetails: any = [];\n  count = 0;\n  setUrlKey(data: string) {\n    let flag = 0;\n    if (this.previousUrl === undefined) {\n      this.eventCollector.set(data, []);\n      this.previousUrl = data;\n    } else if (!(data === this.previousUrl)) {\n      for (const key of Array.from(this.eventCollector.keys())) {\n        if (key === data) {\n          flag = 1;\n          break;\n        }\n      }\n      if (flag === 0) {\n        this.eventCollector.set(data, []);\n      }\n      this.previousUrl = data;\n    }\n  }\n  appendToAnalyticsArray(data: AnalyticsBean) {\n    this.eventCollector.get(this.previousUrl).push(data);\n  }\n\n  pushDataArrayToS3() {\n    this.count++;\n    // this.allDataAnalyticsMap = JSON.parse(JSON.stringify(Array.from(this.eventCollector.keys())));\n    for (const key of Array.from(this.eventCollector.keys())) {\n      this.allDataAnalytics = {\n        pageUrl: key,\n        eventValues: Array.from(this.eventCollector.get(key).values())\n      };\n      this.keys.push(key);\n      if (this.allDataAnalytics.eventValues.length > 0) {\n        this.analyticalService.pushData(this.allDataAnalytics);\n      }\n    }\n    this.eventCollector.clear();\n    for (const key of this.keys) {\n      this.eventCollector.set(key, []);\n    }\n  }\n\n  setRouteDetails(routeDetails: any) {\n    this.routeDetails = routeDetails;\n  }\n\n  getRouteDetails() {\n    return this.routeDetails;\n  }\n\n}\n","export enum EventLabels {\n    PAGE_LOAD = 'PAGE_LOAD',\n    MOUSE_HOVER = 'MOUSE_HOVER',\n    BUTTON_CLICK = 'BUTTON_CLICK',\n    MOUSE_MOVE = 'MOUSE_MOVE',\n    SCROLL = 'SCROLL',\n    CONSOLE_ERROR = 'CONSOLE_ERROR'\n}\n","import { Directive, Input, HostListener } from '@angular/core';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { EventLabels } from '../../types/event.types';\n\n/**\n * Button Directive to track click event\n * Selector can be added to any HTML Element\n */\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[track-btn]'\n})\nexport class ButtonDirective {\n\n  // Gets important data about the button explicitly from the application\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-btn') data: any = {};\n  eventLabels = EventLabels;\n  eventDetails: any;\n\n  /**\n   * Button Tracking - Constructor\n   * @param dataStorage - DataStorageService\n   * @param analyticsService\n   */\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n\n  /**\n   *  Listen to button click actions\n   */\n  @HostListener('click', ['$event']) onClick($event: any) {\n    this.eventDetails = $event;\n    setTimeout(() => {\n      this.sendData();\n    }, 10);\n  }\n\n  /** Sending data on button click */\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.BUTTON_CLICK, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n","import { Directive, OnChanges, HostListener, Input } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[track-scroll]'\n})\nexport class ScrollDirective implements OnChanges {\n\n    // Gets important data about the component explicitly from the application\n    // tslint:disable-next-line: no-input-rename\n    @Input('track-scroll') data: any = {};\n    eventLabels = EventLabels;\n\n    constructor(\n        private analyticsService: AnalyticsService,\n        private dataStorage: DataStorageService\n    ) { }\n\n    // Capture the change in data\n    ngOnChanges(changes: any) {\n        this.data = changes.data.currentValue;\n    }\n\n    // Triggered when any scroll event occurs\n    @HostListener('window:scroll', ['$event']) onScrollEvent($event: any) {\n        setTimeout(() => {\n            this.sendData($event);\n        }, 100);\n    }\n\n\n    public sendData(event: any): void {\n        const analyticsBean: AnalyticsBean =\n            this.analyticsService.setAnalyticsData(this.data, event, this.eventLabels.SCROLL, '');\n        this.dataStorage.appendToAnalyticsArray(analyticsBean);\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[track-buttonHover]'\n})\nexport class ButtonHoverDirective {\n  /** */\n  eventDetails: any;\n  eventLabels = EventLabels;\n  // Gets important data about the button explicitly from the application\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-buttonHover') data: any = {};\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n  // Listen to button hover actions\n  @HostListener('mouseover', ['$event']) onMouseOver($event: any) {\n    this.eventDetails = $event;\n    setTimeout(() => {\n      this.sendData();\n    }, 10);\n  }\n\n  // Sending data on button hover\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.MOUSE_HOVER, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { environment } from '../../environment/environment';\nimport { CredentialsBean } from '../../analytics-bean/analytics-bean';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class EnvironmentService {\n\n  // Sets Whether the user is authenticated or not\n  setAuthentication(isAuth: boolean) {\n    environment.isAuth = isAuth;\n  }\n\n  // Setting credentials on environment\n  setCredentialsToEnvironment(credentials: CredentialsBean, isPageLoadingToBeDetected: boolean) {\n    environment.accessKeyId = credentials.accessKeyId;\n    environment.fileName = credentials.fileName;\n    environment.secretAccessKey = credentials.secretAccessKey;\n    environment.sessionToken = credentials.sessionToken;\n    environment.region = credentials.region;\n    environment.isPageLoadingToBeDetected = isPageLoadingToBeDetected;\n    if (credentials.bucketName.authenticatedBucket !== '' && credentials.bucketName.publicBucket !== '') {\n      environment.bucketName = {\n        authenticatedBucket: credentials.bucketName.authenticatedBucket,\n        publicBucket: credentials.bucketName.publicBucket,\n        screenshotBucket: credentials.bucketName.screenshotBucket\n      };\n    } else {\n      const bucketName = (credentials.bucketName.authenticatedBucket === '') ? credentials.bucketName.publicBucket :\n        credentials.bucketName.authenticatedBucket;\n      environment.bucketName = {\n        authenticatedBucket: bucketName,\n        publicBucket: bucketName,\n        screenshotBucket: credentials.bucketName.screenshotBucket\n      };\n    }\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Router, NavigationEnd, NavigationError } from '@angular/router';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\n// import html2canvas from 'html2canvas';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { EventLabels } from '../../types/event.types';\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouterService {\n  analyticsData: AnalyticsBean;\n  eventLabels = EventLabels;\n  constructor(private routes: Router, private analyticsService: AnalyticsService, private dataStorage: DataStorageService,\n    // tslint:disable-next-line: deprecation\n    @Inject(DOCUMENT) private document: any) {\n\n  }\n\n  /**\n   * Tracking router events\n   */\n  public trackRouterEvents(): void {\n    /** Triggered when current page is loaded */\n    this.routes.events.subscribe((event) => {\n      /** Triggered when NavigationEnd event occurs */\n      if (event instanceof NavigationEnd) {\n        this.analyticsPushData(event);\n      }\n\n      /** Triggered when NavigationError event occurs */\n      if (event instanceof NavigationError) {\n        this.analyticsPushData(event);\n      }\n    });\n  }\n\n  /**\n   * Pushing analytics data\n   * @param event - Router Event\n   */\n  public analyticsPushData(event: any): void {\n    const screenshotName = new Date().getTime().toString();\n    this.analyticsData = this.analyticsService.setAnalyticsData({}, {}, this.eventLabels.PAGE_LOAD, `${screenshotName}.html`, event.url);\n    this.waitTillPageLoad(screenshotName);\n    // Data is send only when user configure the page loading to be true\n    this.dataStorage.setUrlKey(this.analyticsData.eventComponent);\n    this.dataStorage.appendToAnalyticsArray(this.analyticsData);\n  }\n\n  /**\n   * Capturing Screenshot of the page\n   * @param screenshotName uploaded screenshot name\n   *\n  public captureScreenshot(screenshotName: string): void {\n    console.log('called');\n    html2canvas(document.body, {\n      logging: true,\n      allowTaint: true,\n      width: document.body.clientWidth,\n      height: document.body.scrollHeight || window.innerHeight\n    }).then((canvas) => {\n      // this.analyticsService.saveScreenshotsInS3(canvas.toDataURL(), screenshotName);\n      console.log('image uploading...');\n    }).catch(error => {\n      console.log('error', error);\n    });\n  }\n  */\n\n\n  /**\n   * Waiting for page to load completely\n   * @param event \n   */\n  waitTillPageLoad(screenshotName: string) {\n    const _self = this;\n    const interval = setInterval(function () {\n      if (this.document.readyState === 'complete') {\n        clearInterval(interval);\n        _self.captureTemplate(screenshotName);\n      }\n    }, 2000);\n  }\n\n  /**\n   * Capture template of loaded view\n   * @param screenshotName - Screenshot image\n   */\n  captureTemplate(screenshotName: string): void {\n    const fullPageHTML = `<html>\n      <head>\n        ${this.processRegexOperations(this.document.head.innerHTML)}\n        <style>body {scroll-behavior: smooth;}</style>\n      </head>\n      <body>\n        ${this.processRegexOperations(this.document.body.innerHTML)}\n        <script>\n          window.addEventListener(\"message\", (e) => {\n            try{\n              if(e.customData) {\n              var data = JSON.parse(e.customData);\n              if (data.scroll) {\n                window.scroll(0, data.value);\n              };\n            }\n          }catch(e) {console.log(e);}\n          });\n        </script>\n      </body>\n    </html>`;\n\n    this.analyticsService.saveScreenshotsInS3(fullPageHTML, screenshotName);\n  }\n\n\n  processRegexOperations(text: string): string {\n    return text.replace(/src=\\\"\\//g, `src=\"${window.location.origin}/`)\n      .replace(/url\\(\\\"\\//g, `url(\"${window.location.origin}/`)\n      .replace(/href=\"\\//g, `href=\"${window.location.origin}/`)\n      .replace(/src=\\'\\//g, `src='${window.location.origin}/`)\n      .replace(/url\\(\\'\\//g, `url('${window.location.origin}/`)\n      .replace(/href=\\'\\//g, `href='${window.location.origin}/`)\n      .replace(/<script.*<\\/script>/g, '')\n      .replace(/href=\"(?!http)/g, `href=\"${window.location.origin}/`);\n  }\n}\n","import { Injectable, Input, ElementRef } from '@angular/core';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { fromEvent } from 'rxjs';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { EventLabels } from '../../types/event.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PointerService {\n\n  eventLabels = EventLabels;\n  eventDetails: any;\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-pointer') data: any = {};\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n  /**\n   * Track Mouse Movement\n   */\n  trackMouseMoveEvent() {\n    fromEvent(window, 'mousemove')\n      .subscribe((e: MouseEvent) => {\n        this.eventDetails = e;\n        this.sendData();\n      });\n  }\n\n  /**\n   * Pushing Mouse Move details\n   */\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.MOUSE_MOVE, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n@Injectable()\nexport class GlobalErrorHandler implements ErrorHandler {\n    eventLabels = EventLabels;\n    constructor(private injector: Injector) {\n        const analyticsService = this.injector.get(AnalyticsService);\n        if (window.console && console.error) {\n            const consoleErrorFnObject = console.error;\n            console.error = function (...error: any[]) {\n                const processedError = error.map(e => {\n                    if (typeof (e) === 'object') {\n                        return JSON.stringify(e);\n                    } else {\n                        return e;\n                    }\n                });\n                // tslint:disable-next-line: max-line-length\n                const analyticsBean: AnalyticsBean = analyticsService.setAnalyticsData(processedError, {}, this.eventLabels.CONSOLE_ERROR, '');\n                analyticsService.publishConsoleErrors(analyticsBean);\n                consoleErrorFnObject.call(console, error);\n            };\n        }\n    }\n\n    /** Implementing the method */\n    handleError(error: any) { }\n\n}\n","import { NgModule, ModuleWithProviders, ErrorHandler } from '@angular/core';\nimport { NgS3AnalyticsComponent } from './ng-s3-analytics.component';\nimport { CredentialsBean } from './analytics-bean/analytics-bean';\nimport { ButtonDirective } from './directives/button/button.directive';\nimport { ScrollDirective } from './directives/scroll/scroll.directive';\nimport { ButtonHoverDirective } from './directives/button-hover/button-hover.directive';\nimport { EnvironmentService } from './services/environment/environment.service';\nimport { RouterService } from './services/router/router.service';\nimport { interval } from 'rxjs';\nimport { DataStorageService } from '../lib/services/data-storage/data-storage.service';\nimport { PointerService } from './services/pointer/pointer.service';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { GlobalErrorHandler } from './services/error-handler/errorHandler.service';\nimport { CookieService } from 'ngx-cookie-service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  declarations: [\n    NgS3AnalyticsComponent,\n    ButtonDirective,\n    ScrollDirective,\n    ButtonHoverDirective,\n  ],\n  providers: [\n    DataStorageService,\n    EnvironmentService,\n    PointerService,\n    CookieService\n  ],\n  exports: [\n    NgS3AnalyticsComponent,\n    ButtonDirective,\n    ScrollDirective,\n    ButtonHoverDirective,\n  ]\n})\nexport class NgS3AnalyticsModule {\n\n  private static environmentService = new EnvironmentService();\n\n  constructor(private routerService: RouterService, private dataStorage: DataStorageService, private pointerService: PointerService) {\n    interval(1000 * 10).subscribe(x => {\n      this.dataStorage.pushDataArrayToS3();\n    });\n    this.pointerService.trackMouseMoveEvent();\n    this.routerService.trackRouterEvents();\n  }\n  // Configuring the initial setup for s3 bucket and page loading\n  static forRoot(credentials: CredentialsBean, isPageLoadingToBeDetected: boolean = false): ModuleWithProviders {\n    this.environmentService.setCredentialsToEnvironment(credentials, isPageLoadingToBeDetected);\n    // Assigning the credentials to environment variables\n    return {\n      ngModule: NgS3AnalyticsModule,\n      providers: [{ provide: ErrorHandler, useClass: GlobalErrorHandler }]\n    };\n  }\n\n\n}\n"]}