{"version":3,"sources":["ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.service.ts","ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.component.ts","null","ng://@codaglobal/ng-s3-analytics/lib/environment/environment.ts","ng://@codaglobal/ng-s3-analytics/lib/types/event.types.ts","ng://@codaglobal/ng-s3-analytics/lib/services/analytics/analytics.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/data-storage/data-storage.service.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/button/button.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/scroll/scroll.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/button-hover/button-hover.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/services/environment/environment.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/router/router.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/pointer/pointer.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/error-handler/errorHandler.service.ts","ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.module.ts"],"names":["NgS3AnalyticsService","Injectable","args","providedIn","NgS3AnalyticsComponent","prototype","ngOnInit","Component","selector","template","styles","__values","o","m","Symbol","iterator","i","call","next","length","value","done","environment","accessKeyId","secretAccessKey","sessionToken","bucketName","authenticatedBucket","publicBucket","screenshotBucket","fileName","region","isAuth","isPageLoadingToBeDetected","PAGE_LOAD","MOUSE_HOVER","BUTTON_CLICK","MOUSE_MOVE","SCROLL","CONSOLE_ERROR","AnalyticsService","cookieService","httpService","this","demographicInfo","eventLabels","EventLabels","check","JSON","parse","get","getIp","setSessionId","sessionStorage","getItem","sessionId","uuid.v4","setItem","pushData","data","publishTOAuthS3","publishTOUnAuthS3","s3Bucket","constructS3Object","params","Bucket","Key","Date","toISOString","split","Body","processForAthena","eventValues","ContentType","putObject","err","resData","console","error","_this","map","object","stringify","join","AWS.S3","saveScreenshotsInS3","htmlTemplate","screenshotName","upload","publishConsoleErrors","getTime","setAnalyticsData","userData","eventDetails","eventName","eventComponent","eventLabel","window","location","pathname","browser","navigator","userAgent","fullURL","href","resolution","innerWidth","innerHeight","xCoord","undefined","toString","yCoord","pageXCoord","pageXOffset","pageYCoord","pageYOffset","eventTime","screenshot","additionalInfo","utm","getUTMParameters","htmlElement","url","utmObject","includes","param","subscribe","res","set","CookieService","HttpClient","DataStorageService","analyticalService","http","allDataAnalyticsArray","keys","eventCollector","Map","routeDetails","count","setUrlKey","flag","previousUrl","_b","tslib_1.__values","Array","from","_c","appendToAnalyticsArray","push","pushDataArrayToS3","_d","key","allDataAnalytics","pageUrl","values","clear","_e","_f","setRouteDetails","getRouteDetails","ButtonDirective","dataStorage","analyticsService","onClick","$event","setTimeout","sendData","analyticsBean","Directive","Input","HostListener","ScrollDirective","ngOnChanges","changes","currentValue","onScrollEvent","event","ButtonHoverDirective","onMouseOver","EnvironmentService","setAuthentication","setCredentialsToEnvironment","credentials","RouterService","routes","document","navigateOn","trackRouterEvents","events","NavigationEnd","analyticsPushData","NavigationError","analyticsData","waitTillPageLoad","_self","interval","setInterval","readyState","clearInterval","captureTemplate","fullPageHTML","ngS3AnalyticsJS","constructHTMLPage","processRegexOperations","head","innerHTML","body","text","doRegex","origin","Router","Inject","DOCUMENT","PointerService","trackMouseMoveEvent","fromEvent","e","GlobalErrorHandler","injector","consoleErrorFnObject_1","_i","arguments","processedError","handleError","Injector","NgS3AnalyticsModule","routerService","pointerService","addEventListener","x","forRoot","environmentService","ngModule","providers","provide","ErrorHandler","useClass","NgModule","imports","CommonModule","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgS3AnalyticsService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ng-s3-analytics',\n  template: `\n    <p>\n      ng-s3-analytics works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgS3AnalyticsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export let environment = {\n    accessKeyId: '',\n    secretAccessKey: '',\n    sessionToken: '',\n    bucketName: {\n        authenticatedBucket: '',\n        publicBucket: '',\n        screenshotBucket: ''\n    },\n    fileName: '',\n    region: '',\n    isAuth: false,\n    isPageLoadingToBeDetected: true\n};\n\n\n","export enum EventLabels {\n    PAGE_LOAD = 'PAGE_LOAD',\n    MOUSE_HOVER = 'MOUSE_HOVER',\n    BUTTON_CLICK = 'BUTTON_CLICK',\n    MOUSE_MOVE = 'MOUSE_MOVE',\n    SCROLL = 'SCROLL',\n    CONSOLE_ERROR = 'CONSOLE_ERROR'\n}\n","import { Injectable } from '@angular/core';\nimport * as AWS from 'aws-sdk';\nimport { environment } from '../../environment/environment';\nimport * as uuid from 'uuid';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { CookieService } from 'ngx-cookie-service';\nimport { HttpClient } from '@angular/common/http';\nimport { EventLabels } from '../../types/event.types';\n/**\n * Analytics Service\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalyticsService {\n\n  /**\n   * SessionId of plugin\n   */\n  sessionId: string;\n  demographicInfo: any = {};\n  eventLabels = EventLabels;\n  constructor(private cookieService: CookieService, private httpService: HttpClient) {\n    if (!this.cookieService.check('demographic-info')) {\n      this.getIp();\n    } else {\n      this.demographicInfo = JSON.parse(this.cookieService.get('demographic-info'));\n    }\n    this.setSessionId();\n  }\n\n  /**\n   * Checking whether sessionId present in cookie or not\n   * if no session id cookie present, adding new session id otherwise reusing the session id value\n   */\n  private setSessionId(): void {\n    if (sessionStorage.getItem('ngS3AnalyticsSessionId')) {\n      this.sessionId = sessionStorage.getItem('ngS3AnalyticsSessionId');\n    } else {\n      this.sessionId = uuid.v4();\n      sessionStorage.setItem('ngS3AnalyticsSessionId', this.sessionId);\n    }\n  }\n\n  /**\n   * Pushing Analytics data to different bucket based on Authentication flag\n   * @param data \n   */\n  public pushData(data: any): void {\n    if (environment.isAuth) {\n      this.publishTOAuthS3(data);\n    } else {\n      this.publishTOUnAuthS3(data);\n    }\n  }\n\n  /**\n   * Pushing data to UnAuthenticated Bucket S3\n   * @param data \n   */\n  private publishTOUnAuthS3(data: any): void {\n\n    /*** Construct S3 Bucket object */\n    const s3Bucket: AWS.S3 = this.constructS3Object();\n\n    /*** Setting the params for s3 */\n    const params: { Bucket: string, Key: string, Body: string, ContentType: string } = {\n      Bucket: environment.bucketName.publicBucket,\n      // tslint:disable-next-line: max-line-length\n      Key: `${new Date().toISOString().split('T')[0]}_${this.sessionId}_${new Date().toISOString()}.json`,\n      Body: this.processForAthena(data.eventValues),\n      ContentType: 'json'\n    };\n    /*** Pushing the data to s3 */\n    s3Bucket.putObject(params, (err: AWS.AWSError, resData: any) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  /**\n   * Converting JSON Array to string \n   * @param data \n   */\n  processForAthena(data: Array<AnalyticsBean>): string {\n    return data.map((object: any) => {\n      object['sessionId'] = this.sessionId;\n      return JSON.stringify(object);\n    }).join('\\n');\n  }\n\n  /**\n    * Pushing data to Authenticated Bucket S3\n    * @param data \n    */\n  publishTOAuthS3(data: any) {\n\n    /*** Construct S3 Bucket object */\n    const s3Bucket: AWS.S3 = this.constructS3Object();\n    /*** Setting the params for s3 */\n    const params = {\n      Bucket: environment.bucketName.authenticatedBucket,\n      Key: `${new Date().toISOString().split('T')[0]}_${this.sessionId}_${new Date().toISOString()}.json`,\n      Body: this.processForAthena(data.eventValues),\n      ContentType: 'json'\n    };\n    /*** Pushing the data to s3 */\n    s3Bucket.putObject(params, (err: AWS.AWSError, resData: any) => {\n      if (err) {\n        console.error('error', err);\n      }\n    });\n\n  }\n\n\n  /**\n   * Construct S3 Object using AWS SDK\n   */\n  private constructS3Object(): AWS.S3 {\n    return new AWS.S3({\n      accessKeyId: environment.accessKeyId,\n      secretAccessKey: environment.secretAccessKey,\n      region: environment.region\n    });\n  }\n\n  /**\n   * Uploading captured base64 image to S3\n   * @param image - Base64 String\n   * @param screenshotName - Screenshot name linked with pageLoaded data\n   */\n  public saveScreenshotsInS3(htmlTemplate: string, screenshotName: string): void {\n    // constructing the S3 object\n    const s3Bucket: AWS.S3 = this.constructS3Object();\n    // preparing data to be pushed to bucket\n    const params = {\n      Bucket: environment.bucketName.screenshotBucket,\n      Key: `${new Date().toISOString().split('T')[0]}/${this.sessionId}/screenshots/${screenshotName}.html`,\n      Body: htmlTemplate,\n      ContentType: 'text/html'\n    };\n\n    /** Pushing to S3 bucket */\n    s3Bucket.upload(params, (err: AWS.AWSError, resData: any) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  /**\n   * Pushing console errors to S3 bucket\n   * @param data \n   */\n  public publishConsoleErrors(data: any): void {\n\n    // Configuring the s3\n    const s3Bucket: AWS.S3 = this.constructS3Object();\n    data['sessionId'] = this.sessionId;\n\n    // Setting the params for s3\n    const params = {\n      Bucket: environment.bucketName.authenticatedBucket,\n      Key: `${new Date().toISOString().split('T')[0]}_${this.sessionId}_console_errors_${new Date().getTime()}.json`,\n      Body: JSON.stringify(data),\n      ContentType: 'json'\n    };\n    // Pushing the data to s3\n    s3Bucket.putObject(params, (err: AWS.AWSError, resData: any) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n\n\n\n  /**\n   * Setting analytics object to be saved in S3 bucket\n   * @param userData - Data transferred to Event Directive\n   * @param eventDetails - Position of events\n   * @param eventName  - Type of event\n   * @param screenshotName  - file name of saved screenshot if the event is PageLoaded\n   */\n  setAnalyticsData(\n    userData: any = {},\n    eventDetails: any,\n    eventName: string,\n    screenshotName: string,\n    eventComponent?: string): AnalyticsBean {\n    const analyticsBean: AnalyticsBean = {\n      eventLabel: eventName,\n      eventComponent: eventComponent ? eventComponent : window.location.pathname.split('?')[0],\n      browser: window.navigator.userAgent,\n      fullURL: window.location.href,\n      resolution: window.innerWidth + 'x' + window.innerHeight,\n      xCoord: eventDetails['clientX'] !== undefined ? eventDetails['clientX'].toString() : '0' || '0',\n      yCoord: eventDetails['clientY'] !== undefined ? eventDetails['clientY'].toString() : '0' || '0',\n      pageXCoord: window.pageXOffset.toString() || '0',\n      pageYCoord: window.pageYOffset.toString() || '0',\n      eventTime: new Date().toISOString(),\n      screenshot: screenshotName,\n      additionalInfo: JSON.stringify(userData),\n      utm: this.getUTMParameters(window.location.href),\n      demographicInfo: this.demographicInfo,\n      htmlElement: eventDetails['target'] ? eventDetails['target']['innerHTML'] : ''\n    };\n    return analyticsBean;\n  }\n\n  /**\n   * Getting UTM Parameters by processing current pageURL\n   * @param url - Page URL\n   */\n  private getUTMParameters(url: string): any {\n    const utmObject = {};\n    if (url.includes('utm')) {\n      const utmParams = url.split('?')[1].split('&');\n      utmParams.map(param => {\n        const params = param.split('=');\n        utmObject[params[0]] = params[1];\n      });\n    }\n    return utmObject;\n  }\n\n  /**\n   * Set user demographic information in cookies\n   */\n  private getIp(): void {\n    this.httpService.get('https://ipapi.co/json/').subscribe(\n      (res: any) => {\n        this.demographicInfo = res;\n        this.cookieService.set('demographic-info', JSON.stringify(res), new Date(new Date().getTime() + (1000 * 60 * 60 * 24 * 7)));\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { HttpClient } from '@angular/common/http';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataStorageService {\n\n  allDataAnalyticsArray: Array<any> = [];\n  allDataAnalytics: {\n    pageUrl: string,\n    eventValues: Array<any>\n  };\n  previousUrl: string;\n  keys: Array<any> = [];\n  eventCollector = new Map();\n  constructor(private analyticalService: AnalyticsService, private http: HttpClient) { }\n  private routeDetails: any = [];\n  count = 0;\n  setUrlKey(data: string) {\n    let flag = 0;\n    if (this.previousUrl === undefined) {\n      this.eventCollector.set(data, []);\n      this.previousUrl = data || '/';\n    } else if (!(data === this.previousUrl)) {\n      for (const key of Array.from(this.eventCollector.keys())) {\n        if (key === data) {\n          flag = 1;\n          break;\n        }\n      }\n      if (flag === 0) {\n        this.eventCollector.set(data, []);\n      }\n      this.previousUrl = data;\n    }\n  }\n  appendToAnalyticsArray(data: AnalyticsBean) {\n    if (this.previousUrl === undefined) {\n      this.setUrlKey(data.eventComponent);\n    }\n    this.eventCollector.get(this.previousUrl).push(data);\n  }\n\n  pushDataArrayToS3() {\n    this.count++;\n    // this.allDataAnalyticsMap = JSON.parse(JSON.stringify(Array.from(this.eventCollector.keys())));\n    for (const key of Array.from(this.eventCollector.keys())) {\n      this.allDataAnalytics = {\n        pageUrl: key,\n        eventValues: Array.from(this.eventCollector.get(key).values())\n      };\n      this.keys.push(key);\n      if (this.allDataAnalytics.eventValues.length > 0) {\n        this.analyticalService.pushData(this.allDataAnalytics);\n      }\n    }\n    this.eventCollector.clear();\n    for (const key of this.keys) {\n      this.eventCollector.set(key, []);\n    }\n  }\n\n  setRouteDetails(routeDetails: any) {\n    this.routeDetails = routeDetails;\n  }\n\n  getRouteDetails() {\n    return this.routeDetails;\n  }\n\n}\n","import { Directive, Input, HostListener } from '@angular/core';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { EventLabels } from '../../types/event.types';\n\n/**\n * Button Directive to track click event\n * Selector can be added to any HTML Element\n */\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[track-btn]'\n})\nexport class ButtonDirective {\n\n  // Gets important data about the button explicitly from the application\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-btn') data: any = {};\n  eventLabels = EventLabels;\n  eventDetails: any;\n\n  /**\n   * Button Tracking - Constructor\n   * @param dataStorage - DataStorageService\n   * @param analyticsService\n   */\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n\n  /**\n   *  Listen to button click actions\n   */\n  @HostListener('click', ['$event']) onClick($event: any) {\n    this.eventDetails = $event;\n    setTimeout(() => {\n      this.sendData();\n    }, 10);\n  }\n\n  /** Sending data on button click */\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.BUTTON_CLICK, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n","import { Directive, OnChanges, HostListener, Input } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[track-scroll]'\n})\nexport class ScrollDirective implements OnChanges {\n\n    // Gets important data about the component explicitly from the application\n    // tslint:disable-next-line: no-input-rename\n    @Input('track-scroll') data: any = {};\n    eventLabels = EventLabels;\n\n    constructor(\n        private analyticsService: AnalyticsService,\n        private dataStorage: DataStorageService\n    ) { }\n\n    // Capture the change in data\n    ngOnChanges(changes: any) {\n        this.data = changes.data.currentValue;\n    }\n\n    // Triggered when any scroll event occurs\n    @HostListener('window:scroll', ['$event']) onScrollEvent($event: any) {\n        setTimeout(() => {\n            this.sendData($event);\n        }, 100);\n    }\n\n\n    public sendData(event: any): void {\n        const analyticsBean: AnalyticsBean =\n            this.analyticsService.setAnalyticsData(this.data, event, this.eventLabels.SCROLL, '');\n        this.dataStorage.appendToAnalyticsArray(analyticsBean);\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[track-buttonHover]'\n})\nexport class ButtonHoverDirective {\n  /** */\n  eventDetails: any;\n  eventLabels = EventLabels;\n  // Gets important data about the button explicitly from the application\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-buttonHover') data: any = {};\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n  // Listen to button hover actions\n  @HostListener('mouseover', ['$event']) onMouseOver($event: any) {\n    this.eventDetails = $event;\n    setTimeout(() => {\n      this.sendData();\n    }, 10);\n  }\n\n  // Sending data on button hover\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.MOUSE_HOVER, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { environment } from '../../environment/environment';\nimport { CredentialsBean } from '../../analytics-bean/analytics-bean';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class EnvironmentService {\n\n  // Sets Whether the user is authenticated or not\n  setAuthentication(isAuth: boolean) {\n    environment.isAuth = isAuth;\n  }\n\n  // Setting credentials on environment\n  setCredentialsToEnvironment(credentials: CredentialsBean, isPageLoadingToBeDetected: boolean) {\n    environment.accessKeyId = credentials.accessKeyId;\n    environment.fileName = credentials.fileName;\n    environment.secretAccessKey = credentials.secretAccessKey;\n    environment.sessionToken = credentials.sessionToken;\n    environment.region = credentials.region;\n    environment.isPageLoadingToBeDetected = isPageLoadingToBeDetected;\n    if (credentials.bucketName.authenticatedBucket !== '' && credentials.bucketName.publicBucket !== '') {\n      environment.bucketName = {\n        authenticatedBucket: credentials.bucketName.authenticatedBucket,\n        publicBucket: credentials.bucketName.publicBucket,\n        screenshotBucket: credentials.bucketName.screenshotBucket\n      };\n    } else {\n      const bucketName = (credentials.bucketName.authenticatedBucket === '') ? credentials.bucketName.publicBucket :\n        credentials.bucketName.authenticatedBucket;\n      environment.bucketName = {\n        authenticatedBucket: bucketName,\n        publicBucket: bucketName,\n        screenshotBucket: credentials.bucketName.screenshotBucket\n      };\n    }\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Router, NavigationEnd, NavigationError } from '@angular/router';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { EventLabels } from '../../types/event.types';\ndeclare let ngS3AnalyticsJS: any;\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouterService {\n  analyticsData: AnalyticsBean;\n  eventLabels = EventLabels;\n  navigateOn = '';\n  constructor(private routes: Router, private analyticsService: AnalyticsService, private dataStorage: DataStorageService,\n    // tslint:disable-next-line: deprecation\n    @Inject(DOCUMENT) private document: any) {\n\n  }\n\n  /**\n   * Tracking router events\n   */\n  public trackRouterEvents(): void {\n    /** Triggered when current page is loaded */\n    this.routes.events.subscribe((event) => {\n      /** Triggered when NavigationEnd event occurs */\n      if (event instanceof NavigationEnd) {\n        if (this.navigateOn !== event.url) {\n          this.analyticsPushData(event);\n          this.navigateOn = event.url;\n        }\n      } else if (event instanceof NavigationError) {\n        /** Triggered when NavigationError event occurs */\n        this.analyticsPushData(event);\n      }\n    });\n  }\n\n  /**\n   * Pushing analytics data\n   * @param event - Router Event\n   */\n  public analyticsPushData(event: any): void {\n    const screenshotName = new Date().getTime().toString();\n    this.analyticsData = this.analyticsService.setAnalyticsData({}, {}, this.eventLabels.PAGE_LOAD, `${screenshotName}.html`, event.url);\n    this.waitTillPageLoad(screenshotName);\n    // Data is send only when user configure the page loading to be true\n    this.dataStorage.setUrlKey(this.analyticsData.eventComponent);\n    setTimeout(() => {\n      this.dataStorage.appendToAnalyticsArray(this.analyticsData);\n    }, 0);\n  }\n\n\n  /**\n   * Waiting for page to load completely\n   * @param event \n   */\n  waitTillPageLoad(screenshotName: string) {\n    const _self = this;\n    const interval = setInterval(function () {\n      if (this.document.readyState === 'complete') {\n        clearInterval(interval);\n        _self.captureTemplate(screenshotName);\n      }\n    }, 1000);\n  }\n\n  /**\n   * Capture template of loaded view\n   * @param screenshotName - Screenshot image\n   */\n  captureTemplate(screenshotName: string): void {\n    const fullPageHTML = ngS3AnalyticsJS.constructHTMLPage(\n      this.processRegexOperations(this.document.head.innerHTML), this.processRegexOperations(this.document.body.innerHTML))\n    this.analyticsService.saveScreenshotsInS3(fullPageHTML, screenshotName);\n  }\n\n\n  processRegexOperations(text: string): string {\n    return ngS3AnalyticsJS.doRegex(text, window.location.origin);\n  }\n}\n","import { Injectable, Input, ElementRef } from '@angular/core';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { fromEvent } from 'rxjs';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { EventLabels } from '../../types/event.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PointerService {\n\n  eventLabels = EventLabels;\n  eventDetails: any;\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-pointer') data: any = {};\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n  /**\n   * Track Mouse Movement\n   */\n  trackMouseMoveEvent() {\n    fromEvent(window, 'mousemove')\n      .subscribe((e: MouseEvent) => {\n        this.eventDetails = e;\n        this.sendData();\n      });\n  }\n\n  /**\n   * Pushing Mouse Move details\n   */\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.MOUSE_MOVE, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n@Injectable()\nexport class GlobalErrorHandler implements ErrorHandler {\n    eventLabels = EventLabels;\n    constructor(private injector: Injector) {\n        const analyticsService = this.injector.get(AnalyticsService);\n        if (window.console && console.error) {\n            const consoleErrorFnObject = console.error;\n            console.error = function (...error: any[]) {\n                const processedError = error.map(e => {\n                    if (typeof (e) === 'object') {\n                        return JSON.stringify(e);\n                    } else {\n                        return e;\n                    }\n                });\n                // tslint:disable-next-line: max-line-length\n                const analyticsBean: AnalyticsBean = analyticsService.setAnalyticsData(processedError, {}, this.eventLabels.CONSOLE_ERROR, '');\n                analyticsService.publishConsoleErrors(analyticsBean);\n                consoleErrorFnObject.call(console, error);\n            };\n        }\n    }\n\n    /** Implementing the method */\n    handleError(error: any) { }\n\n}\n","import { NgModule, ModuleWithProviders, ErrorHandler } from '@angular/core';\nimport { NgS3AnalyticsComponent } from './ng-s3-analytics.component';\nimport { CredentialsBean } from './analytics-bean/analytics-bean';\nimport { ButtonDirective } from './directives/button/button.directive';\nimport { ScrollDirective } from './directives/scroll/scroll.directive';\nimport { ButtonHoverDirective } from './directives/button-hover/button-hover.directive';\nimport { EnvironmentService } from './services/environment/environment.service';\nimport { RouterService } from './services/router/router.service';\nimport { interval } from 'rxjs';\nimport { DataStorageService } from '../lib/services/data-storage/data-storage.service';\nimport { PointerService } from './services/pointer/pointer.service';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { GlobalErrorHandler } from './services/error-handler/errorHandler.service';\nimport { CookieService } from 'ngx-cookie-service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  declarations: [\n    NgS3AnalyticsComponent,\n    ButtonDirective,\n    ScrollDirective,\n    ButtonHoverDirective,\n  ],\n  providers: [\n    DataStorageService,\n    EnvironmentService,\n    PointerService,\n    CookieService\n  ],\n  exports: [\n    NgS3AnalyticsComponent,\n    ButtonDirective,\n    ScrollDirective,\n    ButtonHoverDirective,\n  ]\n})\nexport class NgS3AnalyticsModule {\n\n  private static environmentService = new EnvironmentService();\n\n  constructor(private routerService: RouterService, private dataStorage: DataStorageService, private pointerService: PointerService) {\n    window.addEventListener('beforeunload', (e) => {\n      this.dataStorage.pushDataArrayToS3();\n    });\n    interval(1000 * 10).subscribe(x => {\n      this.dataStorage.pushDataArrayToS3();\n    });\n    this.pointerService.trackMouseMoveEvent();\n    this.routerService.trackRouterEvents();\n  }\n  // Configuring the initial setup for s3 bucket and page loading\n  static forRoot(credentials: CredentialsBean, isPageLoadingToBeDetected: boolean = false): ModuleWithProviders {\n    this.environmentService.setCredentialsToEnvironment(credentials, isPageLoadingToBeDetected);\n    // Assigning the credentials to environment variables\n    return {\n      ngModule: NgS3AnalyticsModule,\n      providers: [{ provide: ErrorHandler, useClass: GlobalErrorHandler }]\n    };\n  }\n\n\n}\n"]}