{"version":3,"sources":["ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.service.ts","ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.component.ts","null","ng://@codaglobal/ng-s3-analytics/lib/environment/environment.ts","ng://@codaglobal/ng-s3-analytics/lib/types/event.types.ts","ng://@codaglobal/ng-s3-analytics/lib/services/analytics/analytics.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/data-storage/data-storage.service.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/button/button.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/scroll/scroll.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/button-hover/button-hover.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/services/environment/environment.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/router/router.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/pointer/pointer.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/error-handler/errorHandler.service.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/key-stroke/key-stroke.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.module.ts"],"names":["NgS3AnalyticsService","Injectable","args","providedIn","NgS3AnalyticsComponent","prototype","ngOnInit","Component","selector","template","styles","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","environment","dataCollectionApi","isPageLoadingToBeDetected","restrictIPRange","PAGE_LOAD","MOUSE_HOVER","BUTTON_CLICK","MOUSE_MOVE","SCROLL","CONSOLE_ERROR","KEY_STROKE","DEMOGRAPHIC_INFO","SESSION_ID","DEMOGRAPHIC_API_URL","KeyStrokeEventType","AnalyticsService","cookieService","httpService","this","demographicInfo","eventLabels","EventLabels","constants","Constants","check","JSON","parse","get","getIp","setSessionId","sessionStorage","getItem","sessionId","uuid.v4","setItem","pushData","data","checkIpRange","publishTOAuthS3","ipRange","ip","match","processForAthena","_this","map","object","stringify","join","filename","Date","toISOString","split","headers","HttpHeaders","Content-Type","pushDataToS3","eventValues","path","url","put","subscribe","res","err","console","log","saveScreenshotsInS3","htmlTemplate","screenshotName","publishConsoleErrors","getTime","setAnalyticsData","userData","eventDetails","eventName","optional","eventLabel","eventComponent","window","location","pathname","browser","navigator","userAgent","fullURL","href","origin","resolution","innerWidth","innerHeight","xCoord","getEventDetails","yCoord","pageXCoord","pageXOffset","toString","pageYCoord","pageYOffset","eventTime","screenshot","additionalInfo","errors","consoleErrors","utm","getUTMParameters","keyStrokeData","getEmptyKeyStrokeData","htmlElement","getHtmlElement","performance","getPerformanceDetails","undefined","targetElement","key","keyCode","code","elementId","form","htmlElementType","isForm","tagName","navigation","timeOrigin","timing","geMemoryUsageInfo","utmObject","includes","param","params","set","CookieService","HttpClient","DataStorageService","analyticalService","http","allDataAnalyticsArray","keys","eventCollector","Map","routeDetails","count","setUrlKey","flag","previousUrl","_b","tslib_1.__values","Array","from","_c","appendToAnalyticsArray","push","pushDataArrayToS3","_d","allDataAnalytics","pageUrl","values","clear","_e","_f","setRouteDetails","getRouteDetails","ButtonDirective","dataStorage","analyticsService","onClick","$event","setTimeout","sendData","analyticsBean","Directive","Input","HostListener","ScrollDirective","ngOnChanges","changes","currentValue","onScrollEvent","event","ButtonHoverDirective","onMouseOver","EnvironmentService","setConfigurationToEnvironment","configuration","RouterService","routes","navigateOn","trackRouterEvents","events","NavigationEnd","analyticsPushData","NavigationError","analyticsData","waitTillPageLoad","_self","interval","setInterval","document","readyState","clearInterval","captureTemplate","fullPageHTML","ngS3AnalyticsJS","constructHTMLPage","processRegexOperations","querySelector","innerHTML","text","doRegex","Router","PointerService","trackMouseMoveEvent","fromEvent","e","GlobalErrorHandler","injector","trackConsoleErrors","dataStorageService","error","consoleErrorFnObject_1","_self_1","_i","arguments","processedError","Injector","KeyStrokeDirective","el","renderer","nativeElement","id","dynamicId","setAttribute","onKeyStroke","keyStroke","target","elements","type","ElementRef","Renderer2","NgS3AnalyticsModule","routerService","pointerService","errorhandler","addEventListener","x","forRoot","environmentService","NgModule","imports","CommonModule","HttpClientModule","declarations","providers","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgS3AnalyticsService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ng-s3-analytics',\n  template: `\n    <p>\n      ng-s3-analytics works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgS3AnalyticsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export let environment = {\n    dataCollectionApi: 'https://1xgf5a2bq2.execute-api.ap-south-1.amazonaws.com/dev/',\n    isPageLoadingToBeDetected: true,\n    restrictIPRange: ''\n};\n\n\n","export enum EventLabels {\n    PAGE_LOAD = 'PAGE_LOAD',\n    MOUSE_HOVER = 'MOUSE_HOVER',\n    BUTTON_CLICK = 'BUTTON_CLICK',\n    MOUSE_MOVE = 'MOUSE_MOVE',\n    SCROLL = 'SCROLL',\n    CONSOLE_ERROR = 'CONSOLE_ERROR',\n    KEY_STROKE = 'KEY_STROKE'\n}\n\nexport enum Constants {\n    DEMOGRAPHIC_INFO = 'demographic-info',\n    SESSION_ID = 'ngS3AnalyticsSessionId',\n    DEMOGRAPHIC_API_URL = 'https://ipapi.co/json/'\n}\n\n\nexport class KeyStrokeEventType {\n    key: string; // pressed Key\n    keyCode: string; // pressed Key Code\n    elementId: string; // Id of element\n    isForm: boolean; // is it a form\n    form: string;\n    tagName: string; // tagName of element\n    htmlElementType: string; // type of element\n    value: string; // previous value of the element\n    code: string; // Pressed key label\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from '../../environment/environment';\nimport * as uuid from 'uuid';\nimport { AnalyticsBean, PerformanceBean } from '../../analytics-bean/analytics-bean';\nimport { CookieService } from 'ngx-cookie-service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventLabels, KeyStrokeEventType, Constants } from '../../types/event.types';\n/**\n * Analytics Service\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalyticsService {\n\n  /** SessionId of plugin */\n  sessionId: string;\n  /** Demographic info */\n  demographicInfo: any = {};\n  /** Event label constants */\n  eventLabels = EventLabels;\n  /** Constants */\n  constants = Constants;\n\n  /**\n   * Analytics Service constructor\n   * @param cookieService\n   * @param httpService\n   */\n  constructor(\n    private cookieService: CookieService,\n    private httpService: HttpClient) {\n    if (!this.cookieService.check(this.constants.DEMOGRAPHIC_INFO)) {\n      this.getIp();\n    } else {\n      this.demographicInfo = JSON.parse(this.cookieService.get(this.constants.DEMOGRAPHIC_INFO));\n    }\n    this.setSessionId();\n  }\n\n  /**\n   * Checking whether sessionId present in cookie or not\n   * if no session id cookie present, adding new session id otherwise reusing the session id value\n   */\n  private setSessionId(): void {\n    if (sessionStorage.getItem(this.constants.SESSION_ID)) {\n      this.sessionId = sessionStorage.getItem(this.constants.SESSION_ID);\n    } else {\n      this.sessionId = uuid.v4();\n      sessionStorage.setItem(this.constants.SESSION_ID, this.sessionId);\n    }\n  }\n\n  /**\n   * Checking the IP range to be restrict\n   * @param data - data to be pushed\n   */\n  public pushData(data: any): void {\n    if (this.checkIpRange()) {\n      this.publishTOAuthS3(data);\n    }\n  }\n\n\n  /**\n   * IP range restriction added\n   * @restrictIPRange is a regex\n   * if @restrictIPRange is match with current IP,\n   * the analytics data will be restricted\n   */\n  private checkIpRange(): boolean {\n    const ipRange = environment.restrictIPRange;\n    if (ipRange && this.demographicInfo.ip) {\n      return this.demographicInfo.ip.match(ipRange) ? false : true;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Converting JSON Array to string\n   * @param data\n   */\n  private processForAthena(data: Array<AnalyticsBean>): string {\n    return data.map((object: any) => {\n      object['sessionId'] = this.sessionId;\n      return JSON.stringify(object);\n    }).join('\\n');\n  }\n\n  /**\n    * Preparing data to be pushed to DataStorage\n    * @param data  data to be pushed\n    */\n  private publishTOAuthS3(data: any): void {\n    const filename = `${new Date().toISOString().split('T')[0]}_${this.sessionId}_${new Date().toISOString()}.json`;\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.pushDataToS3(filename, this.processForAthena(data.eventValues), headers);\n  }\n\n\n  /**\n   * Pushing data to corresponding bucket using data collection api\n   * @param path - service path\n   * @param data - data to be pushed\n   */\n  private pushDataToS3(path: string, data: any, headers: HttpHeaders): void {\n    const url = `${environment.dataCollectionApi}${path}`;\n\n    this.httpService.put(url, data, { headers: headers }).subscribe(res => { }, err => {\n      console.log(err);\n    });\n  }\n\n  /**\n   * Save the captured HTML to the data collection\n   * @param htmlTemplate - DOM Content\n   * @param screenshotName - filename to be saved\n   */\n  public saveScreenshotsInS3(htmlTemplate: string, screenshotName: string): void {\n    const filename = `assets/${new Date().toISOString().split('T')[0]}/${this.sessionId}/${screenshotName}.html`;\n    const headers = new HttpHeaders({ 'Content-Type': 'text/html' });\n    this.pushDataToS3(filename, htmlTemplate, headers);\n  }\n\n  /**\n   * Pushing console errors to S3 bucket\n   * @param data \n   */\n  public publishConsoleErrors(data: any): void {\n\n    data['sessionId'] = this.sessionId;\n    const filename = `${new Date().toISOString().split('T')[0]}_${this.sessionId}_console_errors_${new Date().getTime()}.json`;\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.pushDataToS3(filename, data, headers);\n  }\n\n\n\n  /**\n   * Setting analytics object to be saved in S3 bucket\n   * @param userData - Data transferred to Event Directive\n   * @param eventDetails - Position of events\n   * @param eventName  - Type of event\n   * @param screenshotName  - file name of saved screenshot if the event is PageLoaded\n   */\n  public setAnalyticsData(\n    userData: any = {},\n    eventDetails: any,\n    eventName: string,\n    screenshotName: string,\n    optional?: {\n      eventComponent?: string,\n      keyStrokeData?: KeyStrokeEventType,\n      consoleErrors?: string\n    }): AnalyticsBean {\n    const analyticsBean: AnalyticsBean = {\n      eventLabel: eventName,\n      eventComponent: optional && optional.eventComponent ? optional.eventComponent : window.location.pathname.split('?')[0],\n      browser: window.navigator.userAgent,\n      fullURL: window.location.href,\n      origin: window.location.origin,\n      resolution: `${window.innerWidth}x${window.innerHeight}`,\n      xCoord: this.getEventDetails(eventDetails['clientX']),\n      yCoord: this.getEventDetails(eventDetails['clientY']),\n      pageXCoord: window.pageXOffset.toString() || '0',\n      pageYCoord: window.pageYOffset.toString() || '0',\n      eventTime: new Date().toISOString(),\n      screenshot: screenshotName,\n      additionalInfo: userData,\n      errors: (optional && optional.consoleErrors) ? optional.consoleErrors : '',\n      utm: this.getUTMParameters(window.location.href),\n      demographicInfo: this.demographicInfo,\n      keyStrokeData: (optional && optional.keyStrokeData) ? optional.keyStrokeData : this.getEmptyKeyStrokeData(),\n      htmlElement: this.getHtmlElement(eventDetails['target']),\n      performance: this.getPerformanceDetails(),\n    };\n    return analyticsBean;\n  }\n\n  /**\n   * Event details\n   * @param value \n   */\n  private getEventDetails(value: any): string {\n    return value !== undefined ? value.toString() : '0';\n  }\n\n  /**\n   * Get HTML Content\n   * @param targetElement - target element\n   */\n  private getHtmlElement(targetElement: any): string {\n    return targetElement !== undefined ? targetElement['innerHTML'] : '';\n  }\n\n\n  private getEmptyKeyStrokeData(): KeyStrokeEventType {\n    return {\n      key: '',\n      keyCode: '',\n      code: '',\n      elementId: '',\n      form: '',\n      htmlElementType: '',\n      isForm: false,\n      tagName: '',\n      value: ''\n    };\n  }\n\n\n  /**\n   * Performance details\n   */\n  private getPerformanceDetails(): PerformanceBean {\n    const performance = window.performance;\n    return {\n      navigation: performance.navigation,\n      timeOrigin: performance.timeOrigin,\n      timing: performance.timing\n    };\n  }\n\n  /**\n   * Memory usage of the application is provided by Google Chrome\n   * @param userAgent - User agent to check the browser\n   */\n  private geMemoryUsageInfo(userAgent: any) {\n    const isChrome = userAgent.split('chrome').length > 1;\n    const memory = isChrome ? window.performance['memory'] : '';\n    return memory;\n  }\n\n  /**\n   * Getting UTM Parameters by processing current pageURL\n   * @param url - Page URL\n   */\n  private getUTMParameters(url: string): any {\n    const utmObject = {};\n    if (url.includes('utm')) {\n      const utmParams = url.split('?')[1].split('&');\n      utmParams.map(param => {\n        const params = param.split('=');\n        utmObject[params[0]] = params[1];\n      });\n    }\n    return utmObject;\n  }\n\n  /**\n   * Set user demographic information in cookies\n   */\n  private getIp(): void {\n    this.httpService.get(this.constants.DEMOGRAPHIC_API_URL).subscribe(\n      (res: any) => {\n        this.demographicInfo = res;\n        this.cookieService.set(\n          this.constants.DEMOGRAPHIC_INFO, JSON.stringify(res),\n          new Date(new Date().getTime() + (1000 * 60 * 60 * 24)));\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { HttpClient } from '@angular/common/http';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataStorageService {\n\n  allDataAnalyticsArray: Array<any> = [];\n  allDataAnalytics: {\n    pageUrl: string,\n    eventValues: Array<any>\n  };\n  previousUrl: string;\n  keys: Array<any> = [];\n  eventCollector = new Map();\n  constructor(private analyticalService: AnalyticsService, private http: HttpClient) { }\n  private routeDetails: any = [];\n  count = 0;\n  setUrlKey(data: string) {\n    let flag = 0;\n    if (this.previousUrl === undefined) {\n      this.eventCollector.set(data, []);\n      this.previousUrl = data || '/';\n    } else if (!(data === this.previousUrl)) {\n      for (const key of Array.from(this.eventCollector.keys())) {\n        if (key === data) {\n          flag = 1;\n          break;\n        }\n      }\n      if (flag === 0) {\n        this.eventCollector.set(data, []);\n      }\n      this.previousUrl = data;\n    }\n  }\n  appendToAnalyticsArray(data: AnalyticsBean) {\n    if (this.previousUrl === undefined) {\n      this.setUrlKey(data.eventComponent);\n    }\n    this.eventCollector.get(this.previousUrl).push(data);\n  }\n\n  pushDataArrayToS3() {\n    this.count++;\n    // this.allDataAnalyticsMap = JSON.parse(JSON.stringify(Array.from(this.eventCollector.keys())));\n    for (const key of Array.from(this.eventCollector.keys())) {\n      this.allDataAnalytics = {\n        pageUrl: key,\n        eventValues: Array.from(this.eventCollector.get(key).values())\n      };\n      this.keys.push(key);\n      if (this.allDataAnalytics.eventValues.length > 0) {\n        this.analyticalService.pushData(this.allDataAnalytics);\n      }\n    }\n    this.eventCollector.clear();\n    for (const key of this.keys) {\n      this.eventCollector.set(key, []);\n    }\n  }\n\n  setRouteDetails(routeDetails: any) {\n    this.routeDetails = routeDetails;\n  }\n\n  getRouteDetails() {\n    return this.routeDetails;\n  }\n\n}\n","import { Directive, Input, HostListener } from '@angular/core';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { EventLabels } from '../../types/event.types';\n\n/**\n * Button Directive to track click event\n * Selector can be added to any HTML Element\n */\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[track-btn]'\n})\nexport class ButtonDirective {\n\n  // Gets important data about the button explicitly from the application\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-btn') data: any = {};\n  eventLabels = EventLabels;\n  eventDetails: any;\n\n  /**\n   * Button Tracking - Constructor\n   * @param dataStorage - DataStorageService\n   * @param analyticsService\n   */\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n\n  /**\n   *  Listen to button click actions\n   */\n  @HostListener('click', ['$event']) onClick($event: any) {\n    this.eventDetails = $event;\n    setTimeout(() => {\n      this.sendData();\n    }, 10);\n  }\n\n  /** Sending data on button click */\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.BUTTON_CLICK, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n","import { Directive, OnChanges, HostListener, Input } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[track-scroll]'\n})\nexport class ScrollDirective implements OnChanges {\n\n    // Gets important data about the component explicitly from the application\n    // tslint:disable-next-line: no-input-rename\n    @Input('track-scroll') data: any = {};\n    eventLabels = EventLabels;\n\n    constructor(\n        private analyticsService: AnalyticsService,\n        private dataStorage: DataStorageService\n    ) { }\n\n    // Capture the change in data\n    ngOnChanges(changes: any) {\n        this.data = changes.data.currentValue;\n    }\n\n    // Triggered when any scroll event occurs\n    @HostListener('window:scroll', ['$event']) onScrollEvent($event: any) {\n        setTimeout(() => {\n            this.sendData($event);\n        }, 100);\n    }\n\n\n    public sendData(event: any): void {\n        const analyticsBean: AnalyticsBean =\n            this.analyticsService.setAnalyticsData(this.data, event, this.eventLabels.SCROLL, '');\n        this.dataStorage.appendToAnalyticsArray(analyticsBean);\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[track-buttonHover]'\n})\nexport class ButtonHoverDirective {\n  /** */\n  eventDetails: any;\n  eventLabels = EventLabels;\n  // Gets important data about the button explicitly from the application\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-buttonHover') data: any = {};\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n  // Listen to button hover actions\n  @HostListener('mouseover', ['$event']) onMouseOver($event: any) {\n    this.eventDetails = $event;\n    setTimeout(() => {\n      this.sendData();\n    }, 10);\n  }\n\n  // Sending data on button hover\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.MOUSE_HOVER, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { environment } from '../../environment/environment';\nimport { Configuration } from '../../analytics-bean/analytics-bean';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class EnvironmentService {\n\n\n  // Setting Configuration on environment\n  setConfigurationToEnvironment(configuration: Configuration, isPageLoadingToBeDetected: boolean) {\n    environment.dataCollectionApi = configuration.dataCollectionApi;\n    environment.isPageLoadingToBeDetected = isPageLoadingToBeDetected;\n    environment.restrictIPRange = configuration.restrictIPRange;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router, NavigationEnd, NavigationError } from '@angular/router';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\ndeclare let ngS3AnalyticsJS: any;\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouterService {\n  analyticsData: AnalyticsBean;\n  eventLabels = EventLabels;\n  navigateOn = '';\n  constructor(private routes: Router, private analyticsService: AnalyticsService, private dataStorage: DataStorageService) {\n\n  }\n\n  /**\n   * Tracking router events\n   */\n  public trackRouterEvents(): void {\n    /** Triggered when current page is loaded */\n    this.routes.events.subscribe((event) => {\n      /** Triggered when NavigationEnd event occurs */\n      if (event instanceof NavigationEnd) {\n        if (this.navigateOn !== event.url) {\n          this.analyticsPushData(event);\n          this.navigateOn = event.url;\n        }\n      } else if (event instanceof NavigationError) {\n        /** Triggered when NavigationError event occurs */\n        this.analyticsPushData(event);\n      }\n    });\n  }\n\n  /**\n   * Pushing analytics data\n   * @param event - Router Event\n   */\n  public analyticsPushData(event: any): void {\n    const screenshotName = new Date().getTime().toString();\n    this.analyticsData = this.analyticsService.setAnalyticsData({}, {}, this.eventLabels.PAGE_LOAD, `${screenshotName}.html`,\n      { eventComponent: event.url });\n    this.waitTillPageLoad(screenshotName);\n    // Data is send only when user configure the page loading to be true\n    this.dataStorage.setUrlKey(this.analyticsData.eventComponent);\n    setTimeout(() => {\n      this.dataStorage.appendToAnalyticsArray(this.analyticsData);\n    }, 0);\n  }\n\n\n  /**\n   * Waiting for page to load completely\n   * @param event \n   */\n  waitTillPageLoad(screenshotName: string) {\n    const _self = this;\n    const interval = setInterval(function () {\n      if (document.readyState === 'complete') {\n        clearInterval(interval);\n        _self.captureTemplate(screenshotName);\n      }\n    }, 1000);\n  }\n\n  /**\n   * Capture template of loaded view\n   * @param screenshotName - Screenshot image\n   */\n  captureTemplate(screenshotName: string): void {\n    const fullPageHTML = ngS3AnalyticsJS.constructHTMLPage(\n      this.processRegexOperations(document.querySelector('head').innerHTML),\n      this.processRegexOperations(document.querySelector('body').innerHTML)\n    );\n    this.analyticsService.saveScreenshotsInS3(fullPageHTML, screenshotName);\n  }\n\n\n  processRegexOperations(text: string): string {\n    return ngS3AnalyticsJS.doRegex(text, window.location.origin);\n  }\n}\n","import { Injectable, Input, ElementRef } from '@angular/core';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { fromEvent } from 'rxjs';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { EventLabels } from '../../types/event.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PointerService {\n\n  eventLabels = EventLabels;\n  eventDetails: any;\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-pointer') data: any = {};\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n  /**\n   * Track Mouse Movement\n   */\n  trackMouseMoveEvent() {\n    fromEvent(window, 'mousemove')\n      .subscribe((e: MouseEvent) => {\n        this.eventDetails = e;\n        this.sendData();\n      });\n  }\n\n  /**\n   * Pushing Mouse Move details\n   */\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.MOUSE_MOVE, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\nimport { DataStorageService } from '../data-storage/data-storage.service';\n@Injectable()\nexport class GlobalErrorHandler {\n    eventLabels = EventLabels;\n    constructor(private injector: Injector) {\n    }\n\n    trackConsoleErrors() {\n\n        const analyticsService = this.injector.get(AnalyticsService);\n        const dataStorageService = this.injector.get(DataStorageService);\n        if (window.console && console.error) {\n            const consoleErrorFnObject = console.error;\n            const _self = this;\n            console.error = function (...error: any[]) {\n                const processedError = error.map(e => {\n                    if (typeof (e) === 'object') {\n                        return JSON.stringify(e);\n                    } else {\n                        return e;\n                    }\n                });\n                // tslint:disable-next-line: max-line-length\n                const analyticsBean: AnalyticsBean = analyticsService.setAnalyticsData\n                    ('', {}, _self.eventLabels.CONSOLE_ERROR, '', { consoleErrors: JSON.stringify(processedError) });\n                dataStorageService.appendToAnalyticsArray(analyticsBean);\n                consoleErrorFnObject.call(console, error);\n            };\n        }\n    }\n}\n","import { Directive, HostListener, ElementRef, Renderer2 } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { KeyStrokeEventType, EventLabels } from '../../types/event.types';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport * as uuid from 'uuid';\n\n// tslint:disable-next-line: directive-selector\n@Directive({ selector: '[track-keyStroke]' })\nexport class KeyStrokeDirective {\n\n    /** Event Labels Constants */\n    eventLabels = EventLabels;\n\n    /**\n     * Dependencies\n     * @param dataStorage\n     * @param analyticsService\n     * @param el - Element Reference\n     * @param renderer - Renderer\n     */\n    constructor(\n        private dataStorage: DataStorageService,\n        private analyticsService: AnalyticsService,\n        private el: ElementRef,\n        private renderer: Renderer2) {\n\n        /**\n         * if Id doesn't belongs to the element, which is being tracked,\n         * Adding a dynamic Id\n         */\n        if (!this.el.nativeElement.id) {\n            const dynamicId = `key_stroke_element_${uuid.v4()}`;\n            this.renderer.setAttribute(this.el.nativeElement, 'id', dynamicId);\n        }\n\n    }\n\n    /**\n     * Tracking Key press events using host listener\n     * Generating a data bean in a specified format\n     * @param $event - KeyPress Event\n     */\n    @HostListener('keypress', ['$event']) onKeyStroke($event: any) {\n        const keyStroke: KeyStrokeEventType = new KeyStrokeEventType();\n\n        keyStroke.elementId = $event.target.id;\n        keyStroke.key = $event.key;\n        keyStroke.code = $event.code;\n        keyStroke.keyCode = $event.keyCode.toString();\n        keyStroke.isForm = $event.target.form !== undefined;\n        keyStroke.form = $event.target.form !== undefined ? JSON.stringify($event.target.form.elements) : '';\n        keyStroke.tagName = $event.target.tagName;\n        keyStroke.htmlElementType = $event.target.type;\n        keyStroke.value = $event.target.value;\n\n        this.sendData(keyStroke, $event);\n    }\n\n    /**\n     * Sending data\n     * @param keyStroke - Captured KeyStroke data\n     * @param eventDetails - Key Press event details\n     */\n    private sendData(keyStroke: KeyStrokeEventType, eventDetails: any): void {\n        const analyticsBean: AnalyticsBean =\n            this.analyticsService.setAnalyticsData({},\n                eventDetails,\n                this.eventLabels.KEY_STROKE, '',\n                { keyStrokeData: keyStroke });\n        this.dataStorage.appendToAnalyticsArray(analyticsBean);\n    }\n}\n","import { NgModule, ModuleWithProviders, ErrorHandler } from '@angular/core';\nimport { NgS3AnalyticsComponent } from './ng-s3-analytics.component';\nimport { Configuration } from './analytics-bean/analytics-bean';\nimport { ButtonDirective } from './directives/button/button.directive';\nimport { ScrollDirective } from './directives/scroll/scroll.directive';\nimport { ButtonHoverDirective } from './directives/button-hover/button-hover.directive';\nimport { EnvironmentService } from './services/environment/environment.service';\nimport { RouterService } from './services/router/router.service';\nimport { interval } from 'rxjs';\nimport { DataStorageService } from '../lib/services/data-storage/data-storage.service';\nimport { PointerService } from './services/pointer/pointer.service';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { GlobalErrorHandler } from './services/error-handler/errorHandler.service';\nimport { CookieService } from 'ngx-cookie-service';\nimport { KeyStrokeDirective } from './directives/key-stroke/key-stroke.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  declarations: [\n    NgS3AnalyticsComponent,\n    ButtonDirective,\n    ScrollDirective,\n    ButtonHoverDirective,\n    KeyStrokeDirective\n  ],\n  providers: [\n    DataStorageService,\n    EnvironmentService,\n    PointerService,\n    CookieService,\n    GlobalErrorHandler\n  ],\n  exports: [\n    NgS3AnalyticsComponent,\n    ButtonDirective,\n    ScrollDirective,\n    ButtonHoverDirective,\n    KeyStrokeDirective\n  ]\n})\nexport class NgS3AnalyticsModule {\n\n  private static environmentService = new EnvironmentService();\n\n  constructor(private routerService: RouterService,\n    private dataStorage: DataStorageService,\n    private pointerService: PointerService,\n    private errorhandler: GlobalErrorHandler) {\n    window.addEventListener('beforeunload', (e) => {\n      this.dataStorage.pushDataArrayToS3();\n    });\n    interval(1000 * 2).subscribe(x => {\n      this.dataStorage.pushDataArrayToS3();\n    });\n    this.pointerService.trackMouseMoveEvent();\n    this.routerService.trackRouterEvents();\n    this.errorhandler.trackConsoleErrors();\n  }\n  // Configuring the initial setup for s3 bucket and page loading\n  static forRoot(configuration: Configuration, isPageLoadingToBeDetected: boolean = false) {\n    this.environmentService.setConfigurationToEnvironment(configuration, isPageLoadingToBeDetected);\n    // Assigning the configuration to environment variables\n  }\n\n\n}\n"]}