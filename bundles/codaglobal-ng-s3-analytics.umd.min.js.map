{"version":3,"sources":["ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.service.ts","ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.component.ts","null","ng://@codaglobal/ng-s3-analytics/lib/environment/environment.ts","ng://@codaglobal/ng-s3-analytics/lib/types/event.types.ts","ng://@codaglobal/ng-s3-analytics/lib/services/environment/environment.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/analytics/handleConfig.ts","ng://@codaglobal/ng-s3-analytics/lib/services/analytics/analytics.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/data-storage/data-storage.service.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/button/button.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/scroll/scroll.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/button-hover/button-hover.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/services/router/router.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/pointer/pointer.service.ts","ng://@codaglobal/ng-s3-analytics/lib/services/error-handler/errorHandler.service.ts","ng://@codaglobal/ng-s3-analytics/lib/directives/key-stroke/key-stroke.directive.ts","ng://@codaglobal/ng-s3-analytics/lib/ng-s3-analytics.module.ts","ng://@codaglobal/ng-s3-analytics/lib/services/custom-event/custom-event.service.ts"],"names":["NgS3AnalyticsService","Injectable","args","providedIn","NgS3AnalyticsComponent","prototype","ngOnInit","Component","selector","template","styles","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","adopt","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","length","push","__values","o","s","m","i","__read","r","ar","error","environment","dataCollectionApi","isPageLoadingToBeDetected","remoteConfigApi","ignoreUrls","ignoreCssRules","showConsent","consentContent","disableTracking","ignoreIPRanges","ignoreDomains","disableDemographicInfo","track","mouse","scroll","PAGE_LOAD","MOUSE_HOVER","BUTTON_CLICK","MOUSE_MOVE","SCROLL","CONSOLE_ERROR","KEY_STROKE","DEMOGRAPHIC_INFO","SESSION_ID","DEMOGRAPHIC_API_URL","KeyStrokeEventType","key","keyCode","elementId","isForm","form","tagName","htmlElementType","code","EnvironmentService","envConfig","Subject","userObject","setConfigurationToEnvironment","configuration","complete","userEmail","userProfileImage","userName","userPhoneNumber","userId","otherInfo","undefined","getEnvObservable","setUserInfo","getUserInfo","asObservable","PluginConfigService","httpClient","injector","cookieService","constants","Constants","getEnvironmentConfig","_this","get","subscribe","res","fetchRemoteConfig","err","console","remotePluginConfig","content","checkShowConsent","handleConfiguration","analyticsBean","checkDisableTracking","checkDomain","fullURL","checkIpRange","demographicInfo","fullUrl","filter","domain","indexOf","removeCheckUrls","trackedObjects","map","analytics","url","eventComponent","object","ip","ipRange","match","getIp","_a","toPromise","_b","set","JSON","stringify","Date","getTime","setDemographicInfo","check","parse","getDemographicInfo","divEl","document","createElement","classList","add","style","position","bottom","left","right","padding","backgroundColor","color","fontSize","textAlign","textEl","createTextNode","appendChild","HttpClient","Injector","CookieService","AnalyticsService","httpService","pluginConfig","environmentService","eventLabels","EventLabels","setSessionId","sessionStorage","getItem","sessionId","uuid.v4","setItem","pushData","data","eventValues","analyticsObjectList","publishTOAuthS3","processForAthena","eventTime","join","filename","toISOString","split","headers","HttpHeaders","Content-Type","pushDataToS3","path","put","saveScreenshotsInS3","htmlTemplate","screenshotName","publishConsoleErrors","setAnalyticsData","userData","eventDetails","eventName","optional","eventLabel","window","location","pathname","browser","navigator","userAgent","href","origin","resolution","innerWidth","innerHeight","xCoord","getEventDetails","yCoord","pageXCoord","pageXOffset","toString","pageYCoord","pageYOffset","screenshot","additionalInfo","errors","consoleErrors","utm","getUTMParameters","keyStrokeData","getEmptyKeyStrokeData","htmlElement","getHtmlElement","performance","getPerformanceDetails","userInfo","targetElement","navigation","timeOrigin","timing","geMemoryUsageInfo","utmObject","includes","param","params","DataStorageService","analyticalService","http","allDataAnalyticsArray","keys","eventCollector","Map","routeDetails","count","setUrlKey","flag","previousUrl","tslib_1.__values","Array","from","_c","appendToAnalyticsArray","pushDataArrayToS3","_d","allDataAnalytics","pageUrl","values","stopIdleTimer","startCalculateIdleTime","clear","_e","_f","setRouteDetails","getRouteDetails","idleTimerSubscription","interval","x","unsubscribe","ButtonDirective","dataStorage","analyticsService","onClick","$event","sendData","Directive","Input","HostListener","ScrollDirective","ngOnChanges","changes","currentValue","onScrollEvent","setTimeout","event","ButtonHoverDirective","onMouseOver","RouterService","routes","navigateOn","trackRouterEvents","events","NavigationEnd","analyticsPushData","NavigationError","analyticsData","waitTillPageLoad","_self","setInterval","readyState","clearInterval","captureTemplate","fullPageHTML","ngS3AnalyticsJS","constructHTMLPage","processRegexOperations","querySelector","innerHTML","text","doRegex","Router","PointerService","trackingSubscription","Subscription","trackMouseMoveEvent","fromEvent","GlobalErrorHandler","trackConsoleErrors","dataStorageService","consoleErrorFnObject_1","_self_1","_i","arguments","processedError","KeyStrokeDirective","el","renderer","nativeElement","id","dynamicId","setAttribute","onKeyStroke","keyStroke","target","type","checkClassNames","elements","classNames","__spread","concat","tslib_1.__spread","Set","ElementRef","Renderer2","NgS3AnalyticsModule","routerService","pointerService","errorhandler","addEventListener","forRoot","NgModule","imports","CommonModule","HttpClientModule","declarations","providers","exports","CustomEventService","pushEvent","customEventName","eventData"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgS3AnalyticsService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ng-s3-analytics',\n  template: `\n    <p>\n      ng-s3-analytics works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgS3AnalyticsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export let environment = {\n    dataCollectionApi: '',\n    isPageLoadingToBeDetected: true,\n    remoteConfigApi: '',\n    ignoreUrls: [],\n    ignoreCssRules: [],\n    showConsent: false,\n    // tslint:disable-next-line: max-line-length\n    consentContent: 'We use cookies to ensure that we provide you with the best possible experience on our website.If you continue to use our site, we assume you accept our use of cookies. Privacy Policy',\n    disableTracking: false,\n    ignoreIPRanges: '',\n    ignoreDomains: [],\n    disableDemographicInfo: false,\n    track: { mouse: true, scroll: true }\n};\n\n\n","export enum EventLabels {\n    PAGE_LOAD = 'PAGE_LOAD',\n    MOUSE_HOVER = 'MOUSE_HOVER',\n    BUTTON_CLICK = 'BUTTON_CLICK',\n    MOUSE_MOVE = 'MOUSE_MOVE',\n    SCROLL = 'SCROLL',\n    CONSOLE_ERROR = 'CONSOLE_ERROR',\n    KEY_STROKE = 'KEY_STROKE'\n}\n\nexport enum Constants {\n    DEMOGRAPHIC_INFO = 'demographic-info',\n    SESSION_ID = 'ngS3AnalyticsSessionId',\n    DEMOGRAPHIC_API_URL = 'https://ipapi.co/json/'\n}\n\n\nexport class KeyStrokeEventType {\n    key: string; // pressed Key\n    keyCode: string; // pressed Key Code\n    elementId: string; // Id of element\n    isForm: boolean; // is it a form\n    form: string;\n    tagName: string; // tagName of element\n    htmlElementType: string; // type of element\n    value: string; // previous value of the element\n    code: string; // Pressed key label\n\n    constructor() {\n        this.key = '';\n        this.keyCode = '';\n        this.elementId = '';\n        this.isForm = false;\n        this.form = '';\n        this.tagName = '';\n        this.htmlElementType = '';\n        this.value = '';\n        this.code = '';\n    }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { environment } from '../../environment/environment';\nimport { Configuration, PluginConfig, UserBean } from '../../analytics-bean/analytics-bean';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class EnvironmentService {\n  envConfig: any = new Subject<PluginConfig>();\n  userObject: Subject<UserBean> = new Subject<UserBean>();\n\n  // Setting Configuration on environment\n  setConfigurationToEnvironment(configuration: Configuration, isPageLoadingToBeDetected: boolean) {\n    environment.dataCollectionApi = configuration.dataCollectionApi;\n    environment.isPageLoadingToBeDetected = isPageLoadingToBeDetected;\n    environment.remoteConfigApi = configuration.remoteConfigApi;\n    this.envConfig.next(environment);\n    this.envConfig.complete();\n    this.userObject.next({ userEmail: '', userProfileImage: '', userName: '', userPhoneNumber: '', userId: '', otherInfo: '' });\n\n    environment.track = { mouse: true, scroll: true };\n    if (configuration.track && configuration.track.mouse !== undefined) {\n      environment.track.mouse = configuration.track.mouse;\n    }\n    if (configuration.track && configuration.track.scroll !== undefined) {\n      environment.track.scroll = configuration.track.scroll;\n    }\n  }\n\n  getEnvObservable() {\n    return this.envConfig;\n  }\n\n  setUserInfo(userObject: UserBean) {\n    this.userObject.next(userObject);\n  }\n\n  getUserInfo(): Observable<UserBean> {\n    return this.userObject.asObservable();\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environment/environment';\nimport { PluginConfig, AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EnvironmentService } from '../environment/environment.service';\nimport { Constants } from '../../types/event.types';\nimport { CookieService } from 'ngx-cookie-service';\n\n\n@Injectable({ providedIn: 'root' })\nexport class PluginConfigService {\n    remotePluginConfig: PluginConfig;\n    demographicInfo: any;\n    /** Constants */\n    constants = Constants;\n    constructor(\n        private httpClient: HttpClient,\n        private injector: Injector,\n        private cookieService: CookieService) {\n\n    }\n\n    getEnvironmentConfig() {\n        const env = this.injector.get(EnvironmentService);\n        env.getEnvObservable().subscribe(\n            (res: any) => {\n                this.fetchRemoteConfig();\n            },\n            (err: any) => {\n                // tslint:disable-next-line: max-line-length\n                console.error('unable to fetch xAnalytics remote configuration. Please make sure you have configured the correct URL, if the issue persist please check the dashboard for more info or contact xA Team. ');\n            }\n        );\n    }\n    public fetchRemoteConfig() {\n        this.httpClient.get(environment.remoteConfigApi)\n            .subscribe(\n                res => {\n                    this.remotePluginConfig = res['body'];\n                    if (this.remotePluginConfig.showConsent) {\n                        const content = this.remotePluginConfig.consentContent ?\n                            this.remotePluginConfig.consentContent : environment.consentContent;\n                        this.checkShowConsent(content);\n                    }\n                },\n                err => {\n                    console.error('collection error', err);\n                }\n            );\n    }\n\n    handleConfiguration(analyticsBean: AnalyticsBean): boolean {\n        return this.checkDisableTracking() &&\n            this.checkDomain(analyticsBean.fullURL) &&\n            this.checkIpRange(analyticsBean.demographicInfo['ip']);\n\n    }\n\n    checkDisableTracking() {\n        if (this.remotePluginConfig) {\n            return !this.remotePluginConfig.disableTracking;\n        } else {\n            return true;\n        }\n    }\n\n    checkDomain(fullUrl: string): boolean {\n        if (this.remotePluginConfig && this.remotePluginConfig.ignoreDomains.length > 0) {\n            return !(this.remotePluginConfig.ignoreDomains.filter(domain => fullUrl.indexOf(domain) >= 0).length > 0);\n        } else {\n            return true;\n        }\n    }\n    removeCheckUrls(trackedObjects: Array<AnalyticsBean>): Array<AnalyticsBean> {\n        if (trackedObjects && trackedObjects.length > 0 && this.remotePluginConfig) {\n            return trackedObjects.map(analytics => {\n                if (!(this.remotePluginConfig.ignoreUrls.filter(url => analytics.eventComponent.indexOf(url) >= 0).length > 0)) {\n                    return analytics;\n                }\n            }).filter(object => object !== undefined);\n        } else {\n            return trackedObjects;\n        }\n    }\n\n    /**\n   * IP range restriction added\n   * @restrictIPRange is a regex\n   * if @restrictIPRange is match with current IP,\n   * the analytics data will be restricted\n   */\n    private checkIpRange(ip: string): boolean {\n        if (ip && this.remotePluginConfig && this.remotePluginConfig.ignoreIPRanges.length > 0) {\n            const ipRange = this.remotePluginConfig.ignoreIPRanges;\n            return ip.match(ipRange) ? false : true;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n  * Set user demographic information in cookies\n  */\n    async getIp() {\n        this.demographicInfo = await this.httpClient.get(this.constants.DEMOGRAPHIC_API_URL).toPromise();\n        this.cookieService.set(\n            this.constants.DEMOGRAPHIC_INFO,\n            JSON.stringify(this.demographicInfo),\n            new Date(new Date().getTime() + (1000 * 60 * 60 * 24)));\n        return this.demographicInfo;\n    }\n\n\n    setDemographicInfo() {\n        if (!this.cookieService.check(this.constants.DEMOGRAPHIC_INFO) && (this.remotePluginConfig && !this.remotePluginConfig.disableDemographicInfo)) {\n            this.getIp();\n        } else {\n            try {\n                this.demographicInfo = JSON.parse(this.cookieService.get(this.constants.DEMOGRAPHIC_INFO));\n            } catch (e) {\n                this.demographicInfo = {};\n            }\n        }\n        return this.demographicInfo;\n    }\n\n    getDemographicInfo() {\n        if (this.remotePluginConfig) {\n            if (this.remotePluginConfig.disableDemographicInfo) {\n                return {};\n            } else {\n                return this.setDemographicInfo();\n            }\n        } else {\n            return {};\n        }\n    }\n\n    checkShowConsent(content: string) {\n        const divEl = document.createElement('div');\n        divEl.classList.add('consent-wrapper');\n        divEl.style.position = 'fixed';\n        divEl.style.bottom = '0';\n        divEl.style.left = '0';\n        divEl.style.right = '0';\n        divEl.style.padding = '15px';\n        divEl.style.backgroundColor = '#3366ff';\n        divEl.style.color = '#fff';\n        divEl.style.fontSize = '12px';\n        divEl.style.textAlign = 'center';\n        const textEl = document.createTextNode(content);\n        divEl.appendChild(textEl);\n        document.body.appendChild(divEl);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from '../../environment/environment';\nimport * as uuid from 'uuid';\nimport { AnalyticsBean, PerformanceBean, UserBean } from '../../analytics-bean/analytics-bean';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { EventLabels, KeyStrokeEventType, Constants } from '../../types/event.types';\nimport { PluginConfigService } from './handleConfig';\nimport { EnvironmentService } from '../environment/environment.service';\n/**\n * Analytics Service\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalyticsService {\n\n  /** SessionId of plugin */\n  sessionId: string;\n  /** Demographic info */\n  demographicInfo: any = {};\n  /** Event label constants */\n  eventLabels = EventLabels;\n  /** Constants */\n  constants = Constants;\n\n  userInfo: UserBean;\n\n  /**\n   * Analytics Service constructor\n   * @param pluginConfig\n   * @param httpService\n   */\n  constructor(\n    private httpService: HttpClient,\n    private pluginConfig: PluginConfigService,\n    private environmentService: EnvironmentService) {\n    this.pluginConfig.getEnvironmentConfig();\n    this.getUserInfo();\n    this.setSessionId();\n  }\n\n  /**\n   * Checking whether sessionId present in cookie or not\n   * if no session id cookie present, adding new session id otherwise reusing the session id value\n   */\n  private setSessionId(): void {\n    if (sessionStorage.getItem(this.constants.SESSION_ID)) {\n      this.sessionId = sessionStorage.getItem(this.constants.SESSION_ID);\n    } else {\n      this.sessionId = uuid.v4();\n      sessionStorage.setItem(this.constants.SESSION_ID, this.sessionId);\n    }\n  }\n\n  /**\n   * Checking the IP range to be restrict\n   * @param data - data to be pushed\n   */\n  public pushData(data: any): void {\n    if (this.pluginConfig.handleConfiguration(data.eventValues[0])) {\n      const analyticsObjectList = this.pluginConfig.removeCheckUrls(data.eventValues);\n      if (analyticsObjectList.length > 0) {\n        this.publishTOAuthS3(analyticsObjectList);\n      }\n    }\n  }\n\n\n\n  /**\n   * Converting JSON Array to string\n   * @param data\n   */\n  private processForAthena(data: Array<AnalyticsBean>): string {\n    if (data && data.length > 0) {\n      return data.map((object: any) => {\n        object['sessionId'] = this.sessionId;\n        object['eventId'] = `${this.sessionId}T${new Date(object.eventTime).getTime()}`;\n        return JSON.stringify(object);\n      }).join('\\n');\n    } else {\n      return JSON.stringify(data);\n    }\n  }\n\n  /**\n    * Preparing data to be pushed to DataStorage\n    * @param data  data to be pushed\n    */\n  private publishTOAuthS3(data: any): void {\n    const filename = `${new Date().toISOString().split('T')[0]}_${this.sessionId}_${new Date().toISOString()}.json`;\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    this.pushDataToS3(filename, this.processForAthena(data), headers);\n  }\n\n\n  /**\n   * Pushing data to corresponding bucket using data collection api\n   * @param path - service path\n   * @param data - data to be pushed\n   */\n  private pushDataToS3(path: string, data: any, headers: HttpHeaders): void {\n    const url = `${environment.dataCollectionApi}${path}`;\n    this.httpService.put(url, data, { headers: headers }).subscribe(res => { }, err => {});\n  }\n\n  /**\n   * Save the captured HTML to the data collection\n   * @param htmlTemplate - DOM Content\n   * @param screenshotName - filename to be saved\n   */\n  public saveScreenshotsInS3(htmlTemplate: string, screenshotName: string): void {\n    if (this.pluginConfig.checkDisableTracking()) {\n      const filename = `assets/${new Date().toISOString().split('T')[0]}/${this.sessionId}/${screenshotName}.html`;\n      const headers = new HttpHeaders({ 'Content-Type': 'text/html' });\n      this.pushDataToS3(filename, htmlTemplate, headers);\n    }\n  }\n\n  /**\n   * Pushing console errors to S3 bucket\n   * @param data \n   */\n  public publishConsoleErrors(data: any): void {\n    if (this.pluginConfig.checkDisableTracking()) {\n      data['sessionId'] = this.sessionId;\n      data['eventId'] = `${this.sessionId}T${new Date(data.eventTime).getTime()}_CONSOLE_ERROR`;\n      const filename = `${new Date().toISOString().split('T')[0]}_${this.sessionId}_console_errors_${new Date().getTime()}.json`;\n      const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n      this.pushDataToS3(filename, data, headers);\n    }\n  }\n\n\n\n  /**\n   * Setting analytics object to be saved in S3 bucket\n   * @param userData - Data transferred to Event Directive\n   * @param eventDetails - Position of events\n   * @param eventName  - Type of event\n   * @param screenshotName  - file name of saved screenshot if the event is PageLoaded\n   */\n  public setAnalyticsData(\n    userData: any = {},\n    eventDetails: any,\n    eventName: string,\n    screenshotName: string,\n    optional?: {\n      eventComponent?: string,\n      keyStrokeData?: KeyStrokeEventType,\n      consoleErrors?: string\n    }): AnalyticsBean {\n    const analyticsBean: AnalyticsBean = {\n      eventLabel: eventName,\n      eventComponent: optional && optional.eventComponent ? optional.eventComponent : window.location.pathname.split('?')[0],\n      browser: window.navigator.userAgent,\n      fullURL: window.location.href,\n      origin: window.location.origin,\n      resolution: `${window.innerWidth}x${window.innerHeight}`,\n      xCoord: this.getEventDetails(eventDetails['clientX']),\n      yCoord: this.getEventDetails(eventDetails['clientY']),\n      pageXCoord: window.pageXOffset.toString() || '0',\n      pageYCoord: window.pageYOffset.toString() || '0',\n      eventTime: new Date().toISOString(),\n      screenshot: screenshotName,\n      additionalInfo: userData,\n      errors: (optional && optional.consoleErrors) ? optional.consoleErrors : '',\n      utm: this.getUTMParameters(window.location.href),\n      demographicInfo: this.pluginConfig.getDemographicInfo(),\n      keyStrokeData: (optional && optional.keyStrokeData) ? optional.keyStrokeData : this.getEmptyKeyStrokeData(),\n      htmlElement: this.getHtmlElement(eventDetails['target'], eventName),\n      performance: this.getPerformanceDetails(),\n      userInfo: this.userInfo\n    };\n    return analyticsBean;\n  }\n\n  /**\n   * Event details\n   * @param value \n   */\n  private getEventDetails(value: any): string {\n    return value !== undefined ? value.toString() : '0';\n  }\n\n  /**\n   * Get HTML Content\n   * @param targetElement - target element\n   */\n  private getHtmlElement(targetElement: any, eventName: string): string {\n    if (eventName !== this.eventLabels.MOUSE_MOVE && eventName !== this.eventLabels.SCROLL) {\n      return targetElement !== undefined ? targetElement['innerHTML'] : '';\n    } else {\n      return '';\n    }\n  }\n\n\n  private getEmptyKeyStrokeData(): KeyStrokeEventType {\n    return {\n      key: '',\n      keyCode: '',\n      code: '',\n      elementId: '',\n      form: '',\n      htmlElementType: '',\n      isForm: false,\n      tagName: '',\n      value: ''\n    };\n  }\n\n\n  /**\n   * Performance details\n   */\n  private getPerformanceDetails(): PerformanceBean {\n    const performance = window.performance;\n    return {\n      navigation: performance.navigation,\n      timeOrigin: performance.timeOrigin,\n      timing: performance.timing\n    };\n  }\n\n  /**\n   * Memory usage of the application is provided by Google Chrome\n   * @param userAgent - User agent to check the browser\n   */\n  private geMemoryUsageInfo(userAgent: any) {\n    const isChrome = userAgent.split('chrome').length > 1;\n    const memory = isChrome ? window.performance['memory'] : '';\n    return memory;\n  }\n\n  /**\n   * Getting UTM Parameters by processing current pageURL\n   * @param url - Page URL\n   */\n  private getUTMParameters(url: string): any {\n    const utmObject = {};\n    if (url.includes('utm')) {\n      const utmParams = url.split('?')[1].split('&');\n      utmParams.map(param => {\n        const params = param.split('=');\n        utmObject[params[0]] = params[1];\n      });\n    }\n    return utmObject;\n  }\n\n  /**\n   * Getting user info\n   */\n  private getUserInfo() {\n    this.environmentService.getUserInfo().subscribe(\n      (res: UserBean) => {\n        this.userInfo = res;\n      }\n    );\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { HttpClient } from '@angular/common/http';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { interval, Subscription } from 'rxjs';\nimport { Constants } from '../../types/event.types';\nimport * as uuid from 'uuid';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataStorageService {\n\n  constants = Constants;\n  allDataAnalyticsArray: Array<any> = [];\n  allDataAnalytics: {\n    pageUrl: string,\n    eventValues: Array<any>\n  };\n  previousUrl: string;\n  keys: Array<any> = [];\n  idleTimerSubscription: Subscription;\n  eventCollector = new Map();\n  constructor(private analyticalService: AnalyticsService, private http: HttpClient) { }\n  private routeDetails: any = [];\n  count = 0;\n  setUrlKey(data: string) {\n    let flag = 0;\n    if (this.previousUrl === undefined) {\n      this.eventCollector.set(data, []);\n      this.previousUrl = data || '/';\n    } else if (!(data === this.previousUrl)) {\n      for (const key of Array.from(this.eventCollector.keys())) {\n        if (key === data) {\n          flag = 1;\n          break;\n        }\n      }\n      if (flag === 0) {\n        this.eventCollector.set(data, []);\n      }\n      this.previousUrl = data;\n    }\n  }\n  appendToAnalyticsArray(data: AnalyticsBean) {\n    if (this.previousUrl === undefined) {\n      this.setUrlKey(data.eventComponent);\n    }\n    this.eventCollector.get(this.previousUrl).push(data);\n  }\n\n  pushDataArrayToS3() {\n    this.count++;\n    for (const key of Array.from(this.eventCollector.keys())) {\n      this.allDataAnalytics = {\n        pageUrl: key,\n        eventValues: Array.from(this.eventCollector.get(key).values())\n      };\n      this.keys.push(key);\n      if (this.allDataAnalytics.eventValues.length > 0) {\n        this.stopIdleTimer();\n        this.analyticalService.pushData(this.allDataAnalytics);\n      } else {\n        this.startCalculateIdleTime();\n      }\n    }\n    this.eventCollector.clear();\n    for (const key of this.keys) {\n      this.eventCollector.set(key, []);\n    }\n  }\n\n  setRouteDetails(routeDetails: any) {\n    this.routeDetails = routeDetails;\n  }\n\n  getRouteDetails() {\n    return this.routeDetails;\n  }\n\n  /**\n   * If the session is idle for 30 min, the session will be cleared\n   */\n  startCalculateIdleTime() {\n    if (!this.idleTimerSubscription) {\n      this.idleTimerSubscription = interval(1000 * 60 * 30).subscribe(x => {\n        const sessionId = uuid.v4();\n        sessionStorage.setItem(this.constants.SESSION_ID, sessionId);\n        this.stopIdleTimer();\n      });\n    }\n  }\n\n  /**\n   * if the idle timer is running, resetting the timer\n   */\n  stopIdleTimer() {\n    if (this.idleTimerSubscription) {\n      this.idleTimerSubscription.unsubscribe();\n      this.idleTimerSubscription = null;\n    }\n    this.startCalculateIdleTime();\n  }\n\n}\n","import { Directive, Input, HostListener } from '@angular/core';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { EventLabels } from '../../types/event.types';\n\n/**\n * Button Directive to track click event\n * Selector can be added to any HTML Element\n */\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[track-btn]'\n})\nexport class ButtonDirective {\n\n  // Gets important data about the button explicitly from the application\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-btn') data: any = {};\n  eventLabels = EventLabels;\n  eventDetails: any;\n\n  /**\n   * Button Tracking - Constructor\n   * @param dataStorage - DataStorageService\n   * @param analyticsService\n   */\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n\n  /**\n   *  Listen to button click actions\n   */\n  @HostListener('click', ['$event']) onClick($event: any) {\n    this.eventDetails = $event;\n    this.sendData();\n  }\n\n  /** Sending data on button click */\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.BUTTON_CLICK, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n","import { Directive, OnChanges, HostListener, Input } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\nimport { environment } from '../../environment/environment';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[track-scroll]'\n})\nexport class ScrollDirective implements OnChanges {\n\n    // Gets important data about the component explicitly from the application\n    // tslint:disable-next-line: no-input-rename\n    @Input('track-scroll') data: any = {};\n    eventLabels = EventLabels;\n\n    constructor(\n        private analyticsService: AnalyticsService,\n        private dataStorage: DataStorageService\n    ) { }\n\n    // Capture the change in data\n    ngOnChanges(changes: any) {\n        this.data = changes.data.currentValue;\n    }\n\n    // Triggered when any scroll event occurs\n    @HostListener('window:scroll', ['$event']) onScrollEvent($event: any) {\n        if (environment.track.scroll) {\n            setTimeout(() => {\n                this.sendData($event);\n            }, 100);\n        }\n    }\n\n\n    public sendData(event: any): void {\n        const analyticsBean: AnalyticsBean =\n            this.analyticsService.setAnalyticsData(this.data, event, this.eventLabels.SCROLL, '');\n        this.dataStorage.appendToAnalyticsArray(analyticsBean);\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\n\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[track-buttonHover]'\n})\nexport class ButtonHoverDirective {\n  /** */\n  eventDetails: any;\n  eventLabels = EventLabels;\n  // Gets important data about the button explicitly from the application\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-buttonHover') data: any = {};\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n  // Listen to button hover actions\n  @HostListener('mouseover', ['$event']) onMouseOver($event: any) {\n    this.eventDetails = $event;\n    setTimeout(() => {\n      this.sendData();\n    }, 10);\n  }\n\n  // Sending data on button hover\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.MOUSE_HOVER, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router, NavigationEnd, NavigationError } from '@angular/router';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\ndeclare let ngS3AnalyticsJS: any;\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouterService {\n  analyticsData: AnalyticsBean;\n  eventLabels = EventLabels;\n  navigateOn = '';\n  constructor(private routes: Router, private analyticsService: AnalyticsService, private dataStorage: DataStorageService) {\n\n  }\n\n  /**\n   * Tracking router events\n   */\n  public trackRouterEvents(): void {\n    /** Triggered when current page is loaded */\n    this.routes.events.subscribe((event) => {\n      /** Triggered when NavigationEnd event occurs */\n      if (event instanceof NavigationEnd) {\n        if (this.navigateOn !== event.url) {\n          this.analyticsPushData(event);\n          this.navigateOn = event.url;\n        }\n      } else if (event instanceof NavigationError) {\n        /** Triggered when NavigationError event occurs */\n        this.analyticsPushData(event);\n      }\n    });\n  }\n\n  /**\n   * Pushing analytics data\n   * @param event - Router Event\n   */\n  public analyticsPushData(event: any): void {\n    const screenshotName = new Date().getTime().toString();\n    this.analyticsData = this.analyticsService.setAnalyticsData({}, {}, this.eventLabels.PAGE_LOAD, `${screenshotName}.html`,\n      { eventComponent: event.url });\n    this.waitTillPageLoad(screenshotName);\n    // Data is send only when user configure the page loading to be true\n    this.dataStorage.setUrlKey(this.analyticsData.eventComponent);\n    setTimeout(() => {\n      this.dataStorage.appendToAnalyticsArray(this.analyticsData);\n    }, 0);\n  }\n\n\n  /**\n   * Waiting for page to load completely\n   * @param event \n   */\n  waitTillPageLoad(screenshotName: string) {\n    const _self = this;\n    const interval = setInterval(function () {\n      if (document.readyState === 'complete') {\n        clearInterval(interval);\n        _self.captureTemplate(screenshotName);\n      }\n    }, 1000);\n  }\n\n  /**\n   * Capture template of loaded view\n   * @param screenshotName - Screenshot image\n   */\n  captureTemplate(screenshotName: string): void {\n    const fullPageHTML = ngS3AnalyticsJS.constructHTMLPage(\n      this.processRegexOperations(document.querySelector('head').innerHTML),\n      this.processRegexOperations(document.querySelector('body').innerHTML)\n    );\n    this.analyticsService.saveScreenshotsInS3(fullPageHTML, screenshotName);\n  }\n\n\n  processRegexOperations(text: string): string {\n    return ngS3AnalyticsJS.doRegex(text, window.location.origin);\n  }\n}\n","import { Injectable, Input, ElementRef } from '@angular/core';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { EventLabels } from '../../types/event.types';\nimport { environment } from '../../environment/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PointerService {\n\n  eventLabels = EventLabels;\n  eventDetails: any;\n  // tslint:disable-next-line: no-input-rename\n  @Input('track-pointer') data: any = {};\n  trackingSubscription: Subscription = new Subscription();\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n\n  /**\n   * Track Mouse Movement\n   */\n  trackMouseMoveEvent() {\n    this.trackingSubscription.add(fromEvent(window, 'mousemove')\n      .subscribe((e: MouseEvent) => {\n        /**\n        * Checking whether user opt to disable tracking mouse\n        */\n        if (environment.track.mouse) {\n          this.eventDetails = e;\n          this.sendData();\n        } else {\n          this.trackingSubscription.unsubscribe();\n        }\n      }));\n  }\n\n  /**\n   * Pushing Mouse Move details\n   */\n  public sendData(): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(this.data, this.eventDetails, this.eventLabels.MOUSE_MOVE, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport { EventLabels } from '../../types/event.types';\nimport { DataStorageService } from '../data-storage/data-storage.service';\n@Injectable()\nexport class GlobalErrorHandler {\n    eventLabels = EventLabels;\n    constructor(private injector: Injector) {\n    }\n\n    trackConsoleErrors() {\n\n        const analyticsService = this.injector.get(AnalyticsService);\n        const dataStorageService = this.injector.get(DataStorageService);\n        if (window.console && console.error) {\n            const consoleErrorFnObject = console.error;\n            const _self = this;\n            console.error = function (...error: any[]) {\n                const processedError = error.map(e => {\n                    if (typeof (e) === 'object') {\n                        return JSON.stringify(e);\n                    } else {\n                        return e;\n                    }\n                });\n                // tslint:disable-next-line: max-line-length\n                const analyticsBean: AnalyticsBean = analyticsService.setAnalyticsData\n                    ('', {}, _self.eventLabels.CONSOLE_ERROR, '', { consoleErrors: JSON.stringify(processedError) });\n                dataStorageService.appendToAnalyticsArray(analyticsBean);\n                consoleErrorFnObject.call(console, error);\n            };\n        }\n    }\n}\n","import { Directive, HostListener, ElementRef, Renderer2 } from '@angular/core';\nimport { AnalyticsService } from '../../services/analytics/analytics.service';\nimport { DataStorageService } from '../../services/data-storage/data-storage.service';\nimport { KeyStrokeEventType, EventLabels } from '../../types/event.types';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\nimport * as uuid from 'uuid';\nimport { environment } from '../../environment/environment';\n\n// tslint:disable-next-line: directive-selector\n@Directive({ selector: '[track-keyStroke]' })\nexport class KeyStrokeDirective {\n\n    /** Event Labels Constants */\n    eventLabels = EventLabels;\n\n    /**\n     * Dependencies\n     * @param dataStorage\n     * @param analyticsService\n     * @param el - Element Reference\n     * @param renderer - Renderer\n     */\n    constructor(\n        private dataStorage: DataStorageService,\n        private analyticsService: AnalyticsService,\n        private el: ElementRef,\n        private renderer: Renderer2) {\n\n        /**\n         * if Id doesn't belongs to the element, which is being tracked,\n         * Adding a dynamic Id\n         */\n        if (!this.el.nativeElement.id) {\n            const dynamicId = `key_stroke_element_${uuid.v4()}`;\n            this.renderer.setAttribute(this.el.nativeElement, 'id', dynamicId);\n        }\n\n    }\n\n    /**\n     * Tracking Key press events using host listener\n     * Generating a data bean in a specified format\n     * @param $event - KeyPress Event\n     */\n    @HostListener('keypress', ['$event']) onKeyStroke($event: any) {\n        const keyStroke: KeyStrokeEventType = new KeyStrokeEventType();\n        if ($event.target.type !== 'password' && this.checkClassNames($event.target.classList)) {\n            keyStroke.elementId = $event.target.id;\n            keyStroke.key = $event.key;\n            keyStroke.code = $event.code;\n            keyStroke.keyCode = $event.keyCode.toString();\n            keyStroke.isForm = $event.target.form !== undefined;\n            keyStroke.form = $event.target.form !== undefined ? JSON.stringify($event.target.form.elements) : '';\n            keyStroke.tagName = $event.target.tagName;\n            keyStroke.htmlElementType = $event.target.type;\n            keyStroke.value = $event.target.value;\n            this.sendData(keyStroke, $event);\n        }\n\n    }\n\n    checkClassNames(classList: Array<string>) {\n        const classNames: any = [...classList].concat(environment.ignoreCssRules);\n        return Array.from(new Set(classNames)).length === classNames.length;\n    }\n\n    /**\n     * Sending data\n     * @param keyStroke - Captured KeyStroke data\n     * @param eventDetails - Key Press event details\n     */\n    private sendData(keyStroke: KeyStrokeEventType, eventDetails: any): void {\n        const analyticsBean: AnalyticsBean =\n            this.analyticsService.setAnalyticsData({},\n                eventDetails,\n                this.eventLabels.KEY_STROKE, '',\n                { keyStrokeData: keyStroke });\n        this.dataStorage.appendToAnalyticsArray(analyticsBean);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { NgS3AnalyticsComponent } from './ng-s3-analytics.component';\nimport { Configuration } from './analytics-bean/analytics-bean';\nimport { ButtonDirective } from './directives/button/button.directive';\nimport { ScrollDirective } from './directives/scroll/scroll.directive';\nimport { ButtonHoverDirective } from './directives/button-hover/button-hover.directive';\nimport { EnvironmentService } from './services/environment/environment.service';\nimport { RouterService } from './services/router/router.service';\nimport { interval } from 'rxjs';\nimport { DataStorageService } from '../lib/services/data-storage/data-storage.service';\nimport { PointerService } from './services/pointer/pointer.service';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { GlobalErrorHandler } from './services/error-handler/errorHandler.service';\nimport { CookieService } from 'ngx-cookie-service';\nimport { KeyStrokeDirective } from './directives/key-stroke/key-stroke.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  declarations: [\n    NgS3AnalyticsComponent,\n    ButtonDirective,\n    ScrollDirective,\n    ButtonHoverDirective,\n    KeyStrokeDirective\n  ],\n  providers: [\n    DataStorageService,\n    EnvironmentService,\n    PointerService,\n    CookieService,\n    GlobalErrorHandler\n  ],\n  exports: [\n    NgS3AnalyticsComponent,\n    ButtonDirective,\n    ScrollDirective,\n    ButtonHoverDirective,\n    KeyStrokeDirective\n  ]\n})\nexport class NgS3AnalyticsModule {\n\n  private static environmentService = new EnvironmentService();\n\n  constructor(private routerService: RouterService,\n    private dataStorage: DataStorageService,\n    private pointerService: PointerService,\n    private errorhandler: GlobalErrorHandler) {\n    window.addEventListener('beforeunload', (e) => {\n      this.dataStorage.pushDataArrayToS3();\n    });\n    interval(1000 * 2).subscribe(x => {\n      this.dataStorage.pushDataArrayToS3();\n    });\n    this.pointerService.trackMouseMoveEvent();\n    this.routerService.trackRouterEvents();\n    this.errorhandler.trackConsoleErrors();\n  }\n  // Configuring the initial setup for s3 bucket and page loading\n  static forRoot(configuration: Configuration, isPageLoadingToBeDetected: boolean = false) {\n    this.environmentService.setConfigurationToEnvironment(configuration, isPageLoadingToBeDetected);\n    // Assigning the configuration to environment variables\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DataStorageService } from '../data-storage/data-storage.service';\nimport { AnalyticsService } from '../analytics/analytics.service';\nimport { AnalyticsBean } from '../../analytics-bean/analytics-bean';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomEventService {\n\n  constructor(private dataStorage: DataStorageService, private analyticsService: AnalyticsService) { }\n  /**\n   * This method is exposed to user to help pushing custom events\n   * \n   * @param customEventName - Any name that user can be configure\n   * @param eventData - Any data, which user configured in additional info\n   */\n  public pushEvent(customEventName: string, eventData: any): void {\n    const analyticsBean: AnalyticsBean =\n      this.analyticsService.setAnalyticsData(eventData, '', customEventName, '');\n    this.dataStorage.appendToAnalyticsArray(analyticsBean);\n  }\n}\n"]}